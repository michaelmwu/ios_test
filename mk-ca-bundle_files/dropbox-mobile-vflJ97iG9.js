define("mobile", ["modules/core/controller_registry", "modules/clean/datetime", "modules/core/i18n", "modules/clean/base64", "modules/core/dom", "modules/core/uri", "modules/core/cookies", "modules/clean/event_load", "libs_mobile", "modules/clean/image_size", "modules/clean/components/ajax_form", "modules/clean/viewer", "modules/core/ordered_dictionary", "modules/clean/uirequest", "jquery", "modules/core/exception", "modules/clean/analytics", "modules/clean/photos/legacy_thumb_loader", "modules/core/browser", "modules/clean/ajax", "modules/clean/sprite", "modules/clean/filepath", "modules/core/notify", "modules/core/html"], function (ControllerRegistry, datetime, modules__core__i18n, base64, dom, URI, Cookies, event_load, libs_mobile, modules__clean__image_size, AjaxForm, Viewer, OrderedDictionary, UIRequest, $, modules__core__exception, analytics, LegacyBatchThumbLoader, Browser, ajax, Sprite, FilePath, Notify, HTML) { var ungettext = modules__core__i18n.ungettext; var _ = modules__core__i18n._; var N_ = modules__core__i18n.N_; var E_ = modules__core__i18n.E_; var render_sentences = modules__core__i18n.render_sentences; var image_best_fit_size = modules__clean__image_size.image_best_fit_size; var alertd = modules__core__exception.alertd; var assert = modules__core__exception.assert; var reportException = modules__core__exception.reportException; var stackTrace = modules__core__exception.stackTrace;// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

if (!window.$j) {
  window.$j = window.jQuery;
}

if (!Function.prototype.bind) {
  Function.prototype.bind = function(oThis) {
    var aArgs, fBound, fNOP, fToBind;
    if (typeof monkey_check === "function") {
      monkey_check();
    }
    if (typeof this !== "function") {
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }
    aArgs = Array.prototype.slice.call(arguments, 1);
    fToBind = this;
    fNOP = function() {};
    fBound = function() {
      return fToBind.apply((this instanceof fNOP && oThis ? this : oThis), aArgs.concat(Array.prototype.slice.call(arguments)));
    };
    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();
    return fBound;
  };
}

jQuery.fn.curry = function() {
  var args, fn, scope;
  fn = arguments[0], scope = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
  if (scope == null) {
    scope = window;
  }
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  return function() {
    var more_args;
    more_args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return fn.apply(scope, __slice.call(args).concat(__slice.call(more_args)));
  };
};

jQuery.fn.stripTags = function(str) {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  return str.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, "");
};

jQuery.fn.controller = function(controller) {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  if (controller != null) {
    return this.data('jscontroller', controller);
  } else {
    return this.data('jscontroller');
  }
};

jQuery.fn.hasScrollBar = function() {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  return this.get(0).scrollHeight > this.height();
};

jQuery.fn.viewportOffset = function() {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  return dom.viewport_offset(this);
};

jQuery.fn.visible = function() {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  return jQuery(this).is(":visible");
};

jQuery.fn.clonePosition = function(source, options) {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  dom.clone_position(this, source, options);
  return this;
};

jQuery.format = function(str, values) {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  return str.replace(/\{([^}]+)\}/g, function(match, name) {
    if (name in values) {
      return values[name];
    } else {
      return match;
    }
  });
};

jQuery.cachedScript = function(url, options) {
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  options = $j.extend(options || {}, {
    dataType: "script",
    cache: true,
    url: url
  });
  return jQuery.ajax(options);
};

jQuery.browser = Browser;

jQuery.addSubjectParam = function(originalOptions, extras) {
  var _ref;
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  if (originalOptions.subject_user && !((_ref = originalOptions.data) != null ? _ref[Constants.UID_PARAM_NAME] : void 0)) {
    return extras[Constants.UID_PARAM_NAME] = String(originalOptions.subject_user);
  }
};

jQuery.ajaxPrefilter(function(options, originalOptions, jqXHR) {
  var extras;
  if (!originalOptions.noDropboxDefaults) {
    extras = {
      t: Cookies.read(Constants.JS_CSRF_COOKIE),
      is_xhr: true
    };
    jQuery.addSubjectParam(originalOptions, extras);
    if (jQuery.ajaxSettings.restrict != null) {
      extras.restrict = jQuery.ajaxSettings.restrict;
    }
    options.data = $j.param($j.extend(originalOptions.data, extras), originalOptions.traditional);
    return false;
  }
});

jQuery.ajax.retryOnce = function(xhr, status, error) {
  var _ref;
  if (typeof monkey_check === "function") {
    monkey_check();
  }
  if (status !== "abort" && ((_ref = xhr.status) === 0 || _ref === 500 || _ref === 502 || _ref === 503) && !this.xhr_retry) {
    this.xhr_retry = true;
    return jQuery.ajax(this);
  }
};

//# sourceMappingURL=jquery_extensions.map
// Generated by CoffeeScript 1.7.1
window.set_csrf_token = function() {
  return $j.ajaxSetup({
    data: {
      t: Cookies.read(Constants.JS_CSRF_COOKIE)
    }
  });
};

window.is_iphone = function() {
  return navigator.userAgent.search("iPhone") > -1;
};

window.is_winphone7 = function() {
  return navigator.userAgent.search('Windows Phone OS') > -1;
};

window.is_android = function() {
  return navigator.userAgent.search('Android') > -1;
};

window.parse_url = function(url) {
  var uri;
  uri = URI.parse(url);
  if (uri.fragment) {
    return uri.fragment;
  }
  return url;
};

window.supports_history = window.history && window.history.pushState;

window.history_stack = [window.location.href];

window.pop_history = function() {
  var relative_url;
  history_stack.pop();
  relative_url = window.location.href.split("dropbox.com")[1];
  return browse_ajax(parse_url(relative_url));
};

window.current_page = function() {
  return $j(".page").attr("id");
};

window.current_href = window.location.href;

window.watch_page_history = function() {
  if (current_page() !== 'home') {
    return;
  }
  $j(window).on("popstate", function(e) {
    if (parse_url(window.location.href) !== parse_url(current_href)) {
      return pop_history();
    }
  });
  if (!supports_history) {
    return setInterval(function() {
      if (parse_url(window.location.href) !== parse_url(current_href)) {
        return pop_history();
      }
    }, 500);
  }
};

window.manual_resize = function() {
  var page, register_display, w;
  page = current_page();
  if (!page) {
    return;
  }
  if (page === "share") {
    w = $j("#share div.ui-content a").width();
    return resize_share_input(w);
  } else if (page === "home" || page === "search") {
    w = $j(window).width();
    return resize_search_input(w);
  } else if (page === "login" || page === "register") {
    register_display = $j("#register-page").css("display");
    if (register_display && register_display !== "none") {
      w = $j("#register-page .ui-input-text").width();
    } else {
      w = $j(".ui-input-text").width();
    }
    return resize_form_inputs(w);
  }
};

window.resize_share_input = function(base) {
  return $j("#share div.ui-content input").css({
    width: base - 13
  });
};

window.resize_search_input = function(base) {
  $j("div.search-bar div.ui-block-a").css({
    width: base - 41 - 5
  });
  return $j("div.search-bar div.ui-input-search").css({
    width: base - 41 - 10 - 30 - 5
  });
};

window.resize_form_inputs = function(base) {
  return $j("form input.ui-input-text").css({
    width: base - 8
  });
};

window.device_width = $j(window).width();

window.watch_orientation_change = function() {
  if (is_winphone7()) {
    return setInterval(function() {
      var device_width;
      if ($j(window).width() !== device_width) {
        device_width = $j(window).width();
        return manual_resize();
      }
    }, 1000);
  } else {
    return $j(window).on("orientationchange", function() {
      return setTimeout(manual_resize, 200);
    });
  }
};

window.page_reset = function() {
  var page;
  manual_resize();
  page = current_page();
  if (page === "register") {
    if ($j('#register form #tos_checkbox').prop('checked')) {
      $j('#tos_r .ui-checkbox .ui-icon').addClass('ui-icon-checkbox-active');
    }
  } else if (page === "login") {
    if (!$j('#login form #remember_me_checkbox').prop('checked')) {
      $j('#remember_me_l .ui-checkbox .ui-icon').addClass('ui-icon-checkbox');
      $j('#remember_me_l .ui-checkbox .ui-icon').removeClass('ui-icon-checkbox-active');
    }
  }
  return $j('.search_box').on("input", function() {
    if ($j(this).val().length > 0) {
      return $j('.ui-input-clear').removeClass('ui-input-clear-hidden');
    } else if (!$j('.ui-input-clear').hasClass('ui-input-clear-hidden')) {
      return $j('.ui-input-clear').addClass('ui-input-clear-hidden');
    }
  });
};

window.setup_touch_events = function() {
  var is_touch, mousedown, mouseup;
  is_touch = is_iphone() || is_android();
  mousedown = (is_touch && "touchstart mousedown") || "mousedown";
  mouseup = (is_touch && "touchend mouseup touchcancel touchmove") || "mouseup touchend click touchcancel touchmove";
  if (is_winphone7()) {
    return $j('#menu_toggle').on(mousedown, toggle_menu);
  } else {
    $j('.file-listing.ui-li, .file-up.ui-li').on(mousedown, function() {
      if (!$j(this).hasClass('donotselect')) {
        return $j(this).addClass('selected');
      }
    });
    $j('.file-listing.ui-li,.file-up.ui-li').on(mouseup, function() {
      return $j(this).removeClass('selected');
    });
    $j('.ui-btn').on(mousedown, function() {
      return $j(this).addClass('selected');
    });
    $j('.ui-btn').on(mouseup, function() {
      return $j(this).removeClass('selected');
    });
    $j('#menu_toggle').on('click', toggle_menu);
    $j('#menu_toggle').on(mouseup, toggle_menu);
    $j('.ui-listview').on(mousedown, '.file-options.ui-li a.ui-btn', function() {
      return $j(this).addClass('selected');
    });
    $j('.ui-listview').on(mouseup, '.file-options.ui-li a.ui-btn', function() {
      return $j(this).removeClass('selected');
    });
    $j('.file-listing.ui-li a.file-listing').on(mousedown, function() {
      $j(this).addClass('selected');
      return $j(this).parent().addClass('donotselect');
    });
    $j('.file-listing.ui-li a.file-listing').on(mouseup, function() {
      $j(this).removeClass('selected');
      return $j(this).parent().removeClass('donotselect');
    });
    return $j('.folder-link').on("click", browse_click);
  }
};

window.watch_locale_selector = function() {
  return $j("#mobile_locale_selector").on('change', function() {
    var hash, url;
    hash = URI(window.location.href).fragment;
    url = hash || window.location.href;
    return Forms.postRequest('/set_locale', {
      locale: $j(this).val(),
      locale_cont: url
    });
  });
};

window.delete_file = function(path, display_name, file_id, icon) {
  return $j.ajax({
    type: "POST",
    url: "/m/delete_cmd",
    data: {
      path: path,
      display_name: display_name,
      file_id: file_id,
      icon: icon
    },
    success: function(req) {
      var undo_delete_button;
      hide_file(file_id);
      $j(".undelete-text").html(req);
      $j(".undelete-dialog img").attr('src', '/static/images/mobile/icons/bw/' + icon + '.png');
      activate_undelete_dialog(file_id);
      undo_delete_button = $j("#" + file_id + "-undo-delete");
      return undo_delete_button.on('click', function(e) {
        e.preventDefault();
        undo_delete_button.off('click');
        return undelete_file(path, file_id);
      });
    }
  });
};

window.undelete_file = function(path, file_id) {
  return $j.ajax({
    type: "POST",
    url: "/m/undelete",
    data: {
      path: path
    },
    success: function(req) {
      show_file(file_id);
      hide_undelete_dialog();
      return clear_undelete_timeout();
    }
  });
};

window.show_file = function(id) {
  return $j("." + id + "-file").show();
};

window.hide_file = function(id) {
  toggle_file_options(id);
  return $j("." + id + "-file").hide();
};

window.clear_undelete_timeout = function() {
  if (typeof undelete_timeout !== "undefined" && undelete_timeout !== null) {
    return clearTimeout(undelete_timeout);
  }
};

window.hide_undelete_dialog = function() {
  return $j('.undelete-dialog').hide();
};

window.activate_undelete_dialog = function(file_id) {
  var undelete_timeout;
  $j(".undelete-dialog").insertBefore("." + file_id + "-file");
  $j('.undelete-dialog').show();
  clear_undelete_timeout();
  return undelete_timeout = setTimeout(hide_undelete_dialog, 7000);
};

window.prepare_main_page = function() {
  $j("#menu_dropdown").hide();
  $j("#search_dropdown").hide();
  close_file_options();
  return $j(".ui-content.main-page").removeClass("hide");
};

window.toggle_search = function() {
  var h;
  $j("#search_dropdown").toggle();
  if ($j("#search_dropdown").is(":visible")) {
    clear_search();
    $j(".search_box").focus();
  }
  if ($j("#search_dropdown .curtain").height() === 0) {
    h = $j(document).height() - $j("#search_dropdown").height();
    return $j("#search_dropdown .curtain").css({
      height: h + "px"
    });
  }
};

window.validate_search = function() {
  var val;
  val = $j("#search_string").val();
  if (!val) {
    alertd(_("Please enter a search"));
    return false;
  }
  return true;
};

window.clear_search = function() {
  if ($j('.search_box').val().length > 0) {
    $j('.search_box').val(this.defaultValue);
    return $j('.ui-input-clear').addClass('ui-input-clear-hidden');
  }
};

window.toggle_menu = function(e, event, elm) {
  if (event) {
    alertd(event.type + " " + elm.id);
  }
  if ($j(".ui-content.main-page").hasClass("hide")) {
    $j(".ui-content.main-page").removeClass("hide");
  } else {
    $j(".ui-content.main-page").addClass("hide");
  }
  $j("#menu_dropdown").toggle();
  return setTimeout(function() {
    return window.scrollTo(0, 1);
  }, 0);
};

window.browse_click = function() {
  browse_ajax($j(this).attr('href'), true);
  return false;
};

window.browse_ajax = function(url, sethistory) {
  if (url.length) {
    if (url.indexOf("/") === !0) {
      url = "/" + url;
    }
    if (url.indexOf("//") === 0) {
      url = "";
    }
  }
  return $j.ajax({
    url: window.location.protocol + "//" + window.location.host + url,
    success: function(resp) {
      var current_href;
      $j("#main")[0].innerHTML = resp;
      page_reset();
      setup_touch_events();
      if (sethistory && supports_history) {
        window.history.pushState(null, null, url);
        history_stack.push(url);
        return current_href = url;
      } else if (sethistory) {
        window.location.href = "#" + url;
        url = window.location.href;
        history_stack.push(parse_url(url));
        return current_href = parse_url(url);
      }
    }
  });
};

window.up_directory = function(elm) {
  var back_url;
  if (supports_history && history_stack.length > 1) {
    back_url = history_stack[history_stack.length - 2];
    if (parse_url(back_url) === parse_url(elm.href)) {
      window.history.back();
      return false;
    }
  }
  return true;
};

window.close_file_options = function() {
  $j('.file-options:visible').hide();
  $j('a span.ui-icon.ui-icon-file-options-selected').addClass('ui-icon-file-options');
  return $j('a span.ui-icon.ui-icon-file-options-selected').removeClass('ui-icon-file-options-selected');
};

window.toggle_file_options = function(id, url, path, display_name, icon, ftype, is_read_only) {
  var height, isOpen, listing_height, options_cell, scrollTop;
  isOpen = $j('.' + id + "-options").is(":visible");
  close_file_options();
  if (!isOpen) {
    if ($j("." + id + "-options").length) {
      $j("." + id + "-options").toggle();
    } else {
      new_file_options(id, url, path, display_name, icon, ftype, is_read_only);
    }
    height = $j(window).height();
    scrollTop = $j(window).scrollTop();
    options_cell = $j("." + id + "-options").position().top;
    listing_height = $j("." + id + "-file").height() + 1;
    if (is_winphone7() && Math.abs(options_cell - $j(document).height()) < listing_height) {
      $j(window).scrollTop(999999);
    } else if (is_android() && Math.abs(height + scrollTop - options_cell) < listing_height * 2) {
      $j(window).scrollTop(options_cell - height + listing_height * 2);
    } else {
      $j("." + id + "-file")[0].scrollIntoView();
    }
    $j("." + id + "-file a span.ui-icon").removeClass("ui-icon-file-options");
    return $j("." + id + "-file a span.ui-icon").addClass("ui-icon-file-options-selected");
  }
};

window.new_file_options = function(id, url, path, display_name, icon, ftype, is_read_only) {
  var out;
  out = HTML.tmpl('quick-actions-tmpl', {
    id: id,
    share_text: _("Share link"),
    delete_text: _("Delete")
  }).toHTML();
  out = $j(out);
  out.insertAfter("." + id + "-file");
  if (!is_read_only) {
    $j("." + id + "-options .delete-button").on('click', function(e) {
      e.preventDefault();
      return delete_file(path, display_name, id, icon);
    });
  } else {
    $j("." + id + "-options .delete-button").addClass('disabled');
  }
  $j("." + id + "-options .share-button").on('click', function(e) {
    e.preventDefault();
    shmodel_file(path);
    return false;
  });
  return out;
};

window.shmodel_file = function(path) {
  var uri;
  uri = URI({
    path: '/sm/create' + FilePath.normalize(path)
  }).updateQuery(Constants.UID_PARAM_NAME, Constants.uid);
  return Forms.postRequest(uri.toString());
};

window.kill_notification = function() {
  create_cookie(Constants.MOBILE_AD_COOKIE, base64.encode('ptz'), Constants.MOBILE_AD_COOKIE_EXPIRES);
  return $j("#notification_box").toggle();
};

window.clear_ad_cookie = function() {
  return delete_cookie(Constants.MOBILE_AD_COOKIE);
};

window.check_tos = function() {
  $j('#register form #tos_checkbox').prop('checked', true);
  return $j('#tos_r .ui-checkbox .ui-icon').addClass('ui-icon-checkbox-active');
};

window.uncheck_tos = function() {
  $j('#register form #tos_checkbox').prop('checked', false);
  return $j('#tos_r .ui-checkbox .ui-icon').removeClass('ui-icon-checkbox-active');
};

window.toggle_tos = function() {
  var checkbox;
  checkbox = $j('form #tos_checkbox');
  if (!checkbox.prop('checked')) {
    return check_tos();
  } else {
    return uncheck_tos();
  }
};

window.toggle_remember_me = function() {
  var checkbox;
  checkbox = $j('form #remember_me_checkbox');
  if (!checkbox.prop('checked')) {
    $j('#login form #remember_me_checkbox').prop('checked', true);
    $j('#remember_me_l .ui-checkbox .ui-icon').addClass('ui-icon-checkbox-active');
    return $j('#remember_me_l .ui-checkbox .ui-icon').removeClass('ui-icon-checkbox');
  } else {
    $j('#login form #remember_me_checkbox').prop('checked', false);
    $j('#remember_me_l .ui-checkbox .ui-icon').addClass('ui-icon-checkbox');
    return $j('#remember_me_l .ui-checkbox .ui-icon').removeClass('ui-icon-checkbox-active');
  }
};

window.login_link = function() {
  $j('#login-page').show();
  $j('#register-page').hide();
  $j('#login_link_div').hide();
  $j('#sign-in-link').hide();
  $j('#create_account_link_div').show();
  $j('#register-link').show();
  $j('#header_txt').html(_('Sign in'));
  return false;
};

window.create_account_link = function() {
  $j('#login-page').hide();
  $j('#register-page').show();
  $j('#login_link_div').show();
  $j('#sign-in-link').show();
  $j('#create_account_link_div').hide();
  $j('#register-link').hide();
  $j('#header_txt').html(_('Create account'));
  return false;
};

window.send_desktop_install_reminder = function(token) {
  $j('#send-email').hide();
  $j('#email-sent').show();
  $j('#email-link').removeAttr('onclick');
  return $j.ajax({
    url: '/m/send_download_reminder',
    type: 'POST',
    data: {
      token: token
    }
  });
};

window.create_cookie = function(name, value, days) {
  var cookie_str, date;
  cookie_str = "" + name + "=" + value + ";";
  if (days) {
    date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    cookie_str += " expires=" + (date.toGMTString()) + ";";
  }
  cookie_str += " path=/";
  return document.cookie = cookie_str;
};

window.delete_cookie = function(name) {
  return create_cookie(name, "", -1);
};

window.jquery_set_onreadystatechange = function() {
  return $j.ajaxPrefilter(function(options, _, jqXHR) {
    var xhrFactory;
    if (options.onreadystatechange) {
      xhrFactory = options.xhr;
      return options.xhr = function() {
        var handler, xhr;
        xhr = xhrFactory.apply(this, arguments);
        handler = function() {
          return options.onreadystatechange(xhr, jqXHR);
        };
        if (xhr.addEventListener) {
          xhr.addEventListener("readystatechange", handler, false);
        }
        return xhr;
      };
    }
  });
};

String.prototype.snippet = function(maxchars) {
  var ellipsis, left_count, right_count, right_start;
  if (maxchars == null) {
    maxchars = 50;
  }
  if (this.length <= maxchars) {
    return this;
  }
  ellipsis = "...";
  maxchars -= ellipsis.length;
  left_count = Math.floor(maxchars * 0.75);
  right_count = maxchars - left_count;
  right_start = this.length - right_count;
  return this.substr(0, left_count) + ellipsis + this.substr(right_start, right_count);
};

window.fn_extensions = function() {
  var bind2, merge, slice, update;
  slice = Array.prototype.slice;
  update = function(array, args) {
    var arrayLength, length;
    arrayLength = array.length;
    length = args.length;
    while (length--) {
      array[arrayLength + length] = args[length];
    }
    return array;
  };
  merge = function(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  };
  bind2 = function(context) {
    var args, __method;
    if (arguments.length < 2 && (typeof arguments[0] === 'undefined')) {
      return this;
    }
    __method = this;
    args = slice.call(arguments, 1);
    return function() {
      var a;
      a = merge(args, arguments);
      return __method.apply(context, a);
    };
  };
  return {
    bind2: bind2
  };
};

if (!Object.keys) {
  Object.keys = (function() {
    var dontEnums, hasDontEnumBug, hasOwnProperty;
    hasOwnProperty = Object.prototype.hasOwnProperty;
    hasDontEnumBug = !{
      toString: null
    }.propertyIsEnumerable('toString');
    dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
    return function(obj) {
      var dontEnum, prop, result, _i, _len;
      if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {
        throw new TypeError('Object.keys called on non-object');
      }
      result = [];
      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }
      if (hasDontEnumBug) {
        for (_i = 0, _len = dontEnums.length; _i < _len; _i++) {
          dontEnum = dontEnums[_i];
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnum);
          }
        }
      }
      return result;
    };
  })();
}

set_csrf_token();

event_load.window_load(setup_touch_events);

$j(watch_page_history);

$j(page_reset);

watch_orientation_change();

watch_locale_selector();

jquery_set_onreadystatechange();

$j.extend(Function.prototype, fn_extensions());

//# sourceMappingURL=extensions.map
// Generated by CoffeeScript 1.7.1
window.DomUtil = {
  fillVal: function(val, className) {
    var x, _i, _len, _ref, _results;
    _ref = $("." + className);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (x.tagName === "INPUT") {
        x.value = val;
        _results.push(x.defaultValue = val);
      } else {
        _results.push(x.innerHTML = val);
      }
    }
    return _results;
  },
  fromElm: function(elm_selector) {
    assert($(elm_selector), "No elements match this selector");
    return $(elm_selector)[0].innerHTML;
  }
};

//# sourceMappingURL=dom_util.map
// Generated by CoffeeScript 1.7.1
window.Util = {
  keep_cont_params: function(ele) {
    var $ele, href;
    if (window.location.search.indexOf("cont") !== -1) {
      $ele = $(ele);
      href = $ele.attr("href");
      $ele.attr("href", "" + href + window.location.search);
    }
  },
  urlquote: function(path) {
    return path.split("/").map(encodeURIComponent).join("/");
  },
  unquote: function(path) {
    return path.split("/").map(decodeURIComponent).join("/");
  },
  watch_async_task: function(user_id, task_id, success_fn, update_fn, error_fn, just_failed) {
    var on_failure;
    if (!task_id.match(/^[A-Za-z0-9_\-=]*$/)) {
      return;
    }
    if (just_failed) {
      on_failure = function() {
        if (error_fn) {
          return error_fn();
        }
      };
    } else {
      on_failure = function() {
        return setTimeout(((function(_this) {
          return function() {
            return Util.watch_async_task(user_id, task_id, success_fn, update_fn, error_fn, true);
          };
        })(this)), 5000);
      };
    }
    return $.ajax({
      url: "/async_task_status/" + task_id,
      type: 'POST',
      subject_user: user_id,
      success: (function(_this) {
        return function(status) {
          if (success_fn && status.indexOf("done:") === 0) {
            return success_fn(status.substr(5));
          } else if (error_fn && status.indexOf("err:") === 0) {
            return error_fn(status.substr(4));
          } else {
            if (update_fn) {
              update_fn(status);
            }
            return setTimeout((function() {
              return Util.watch_async_task(user_id, task_id, success_fn, update_fn, error_fn);
            }), 5000);
          }
        };
      })(this),
      error: on_failure
    });
  },
  is_retina_display: window.devicePixelRatio > 1,
  hashString: function(str) {
    var hash, i;
    hash = 0;
    i = 0;
    while (i < str.length) {
      hash = ((hash << 5) - hash) + str.charCodeAt(i);
      hash = hash & hash;
      i++;
    }
    return hash;
  },
  preloaded_images: {},
  preload_image: function(url, on_error) {
    var img;
    if (Util.preloaded_images[url]) {
      return;
    }
    img = new Image();
    if ((on_error != null) && on_error) {
      $(img).error(on_error);
    }
    img.src = url;
    return Util.preloaded_images[url] = img;
  },
  get_preloaded_image: function(url) {
    if (Util.preloaded_images[url]) {
      return $(Util.preloaded_images[url]);
    } else {
      return $("<img src=\"" + url + "\" />");
    }
  },
  video_elm: function(url, autoplay, poster, controls) {
    var vid;
    vid = $("<video></video>").attr("src", url);
    if (autoplay) {
      $(vid).attr("autoplay", "true");
    }
    if (poster) {
      $(vid).attr("poster", poster);
    }
    if (controls) {
      $(vid).attr("controls", "1");
    }
    return vid;
  },
  get_preview_img_dimensions: function(img_elm) {
    var horiz_ratio, img_dims, max_dims, ratio, vert_ratio;
    max_dims = {
      width: $("#file-preview-modal .preview").width() || $(window).width(),
      height: $("#file-preview-modal .preview").height() || $(window).height()
    };
    img_dims = {
      width: img_elm.naturalWidth,
      height: img_elm.naturalHeight
    };
    horiz_ratio = img_dims.width / max_dims.width;
    vert_ratio = img_dims.height / max_dims.height;
    ratio = Math.max(horiz_ratio, vert_ratio);
    if (ratio < 1) {
      return false;
    } else {
      return {
        width: Math.floor(img_dims.width / ratio),
        height: Math.floor(img_dims.height / ratio)
      };
    }
  },
  track_twitter_chars_left: function(input_id, char_limit) {
    var cb;
    clearInterval(Util.chars_left_interval);
    cb = function() {
      var chars_left_elm, left;
      chars_left_elm = $("#twitter-chars");
      left = char_limit - $("#" + input_id).val().trim().length;
      if (left < 0) {
        chars_left_elm.addClass("too-long");
      } else {
        chars_left_elm.removeClass("too-long");
      }
      return chars_left_elm.text(left);
    };
    return Util.chars_left_interval = setInterval(cb, 250);
  },
  screen_width: null,
  set_screen_width: function(callback) {
    if (Util.screen_width !== window.innerWidth) {
      Util.screen_width = window.innerWidth;
      if (callback) {
        return callback();
      }
    } else {
      return setTimeout(Util.set_screen_width, 1);
    }
  },
  resize_inputs: function() {
    var input_width;
    input_width = window.innerWidth - 30;
    return $("input[type=text], input[type=password], input[type=email], textarea").outerWidth(input_width);
  },
  _batch_thumb_endpoints: null,
  load_thumbs_in_view: function(thumb_elms_selector) {
    var first_after, first_before, first_in_view, i, last_after, last_before, last_in_view, thumb, thumb_elms, top_offset, viewport_height, viewport_top, _i, _len;
    thumb_elms = $(thumb_elms_selector);
    if (!thumb_elms.length) {
      return;
    }
    viewport_top = $(window).scrollTop();
    viewport_height = $(window).height();
    top_offset = thumb_elms.first().offset().top;
    for (i = _i = 0, _len = thumb_elms.length; _i < _len; i = ++_i) {
      thumb = thumb_elms[i];
      thumb = thumb_elms[i];
      if ($(thumb).hasClass("thumb-loaded")) {
        continue;
      }
      if ($(thumb).offset().top > top_offset) {
        top_offset = $(thumb).offset().top;
      }
      if (top_offset > viewport_top - viewport_height && top_offset < viewport_top) {
        if (typeof first_before === "undefined" || first_before === null) {
          first_before = i;
        }
        last_before = i;
      } else if (top_offset > viewport_top && top_offset < viewport_top + viewport_height) {
        if (typeof first_in_view === "undefined" || first_in_view === null) {
          first_in_view = i;
        }
        last_in_view = i;
      } else if (top_offset > viewport_top + viewport_height && top_offset < viewport_top + 8 * viewport_height) {
        if (typeof first_after === "undefined" || first_after === null) {
          first_after = i;
        }
        last_after = i;
      }
    }
    return Util._load_thumbs_from_indices(thumb_elms, first_in_view, last_in_view, first_after, first_before, last_after, last_before);
  },
  _load_thumbs_from_indices: function(thumb_elms, first_in_view, last_in_view, first_after, first_before, last_after, last_before) {
    var THUMBS_BATCH_SIZE, batch_thumbs, first_last, i, load_order, on_thumb_load, _i, _j, _len, _ref, _ref1;
    on_thumb_load = function(img) {
      return $(img).parent().addClass("thumb-loaded");
    };
    THUMBS_BATCH_SIZE = 15;
    batch_thumbs = [];
    load_order = [[first_in_view, last_in_view], [first_after, last_after], [first_before, last_before]];
    for (_i = 0, _len = load_order.length; _i < _len; _i++) {
      first_last = load_order[_i];
      for (i = _j = _ref = first_last[0], _ref1 = first_last[1]; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
        batch_thumbs.push($(thumb_elms[i]).find("img")[0]);
      }
    }
    return LegacyBatchThumbLoader.batch_load_thumbs(batch_thumbs, THUMBS_BATCH_SIZE, on_thumb_load);
  },
  blackout_background: function(header_selector, content_selector) {
    $("body").addClass("blackout");
    $(header_selector).addClass("no-opacity");
    return $(content_selector).addClass("no-opacity");
  },
  unblackout_background: function(header_selector, content_selector) {
    $("body").removeClass("blackout");
    $(header_selector).removeClass("no-opacity");
    return $(content_selector).removeClass("no-opacity");
  },
  desktop_friendly_touchend: ("ontouchend" in window ? "touchend" : "click"),
  desktop_friendly_touchstart: ("ontouchstart" in window ? "touchstart" : "click"),
  hide_url_bar: function() {
    return setTimeout((function() {
      return window.scrollTo(0, 1);
    }), 100);
  },
  smart_window_load: function(func) {
    if (document.readyState === 'complete') {
      return setTimeout(func, 0);
    } else {
      return $(window).on('load', func);
    }
  }
};

//# sourceMappingURL=util.map
// Generated by CoffeeScript 1.7.1
window.TouchUtil = {
  doubletap: function(elm, callback) {
    var MAX_DIST, handler;
    MAX_DIST = 25;
    handler = function(e) {
      var clear_touch, dist, reset_doubletap, tap;
      e = e.originalEvent;
      clear_touch = function() {
        return this.touch = false;
      };
      reset_doubletap = $.proxy(clear_touch, this);
      if (!(e.touches.length === 1 && e.changedTouches.length === 1)) {
        reset_doubletap();
        return;
      }
      tap = e.changedTouches[0];
      if (this.touch) {
        dist = {
          x: Math.abs(tap.clientX - this.touch.x),
          y: Math.abs(tap.clientY - this.touch.y)
        };
        if (dist.x > MAX_DIST || dist.y > MAX_DIST) {
          reset_doubletap();
          return;
        }
        return callback();
      } else {
        this.touch = {
          x: tap.pageX,
          y: tap.pageY
        };
        return setTimeout(reset_doubletap, 250);
      }
    };
    return $(elm).bind("touchstart", handler);
  },
  gesturestart: function(elm, callback) {
    var respond_to_gesturestart;
    if (is_iphone()) {
      return $(elm).bind("gesturestart", callback);
    } else {
      respond_to_gesturestart = function(e) {
        e = e.originalEvent;
        if (e.touches.length > 1 || e.changedTouches.length > 1) {
          return callback();
        }
      };
      return $(elm).bind("touchstart", respond_to_gesturestart);
    }
  }
};

//# sourceMappingURL=touch_util.map
// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

window.NOTCLIENTS = {};

window.NOTCLIENT_DEBUG = false;

window.add_notclient = function(user_id, nid, ns_map) {
  new_notclient(user_id);
  return setTimeout((function() {
    return NOTCLIENTS[user_id].init(nid, ns_map);
  }), 2000);
};

window.new_notclient = function(user_id) {
  var HANDLER_WAIT_MS, INITIAL_CHILLAGE_MS, MAX_CHILLAGE_MS, MAX_URL_LENGTH, SFJ_HANDLER_TYPE, USER_HANDLER_TYPE, abort, aborted, build_subscribe_params, connect, connect_timeout_id, consecutive_bad_rounds, done_handling, handler_map, initiated, is_connected, is_handling, is_nonnegative_int, is_positive_int, log, new_nid, new_ns_map, next_handler_id, nid, notclient, notserver_chillout_ms, ns_map, one_or_more_handler_failures, reconnect, report_slackers, reset, run_handlers, slacker_timeout_id, sleeping_for, total_rounds, unfinished_handler_ids, update_ns_map, xhr, _connect;
  assert(__indexOf.call(NOTCLIENTS, user_id) < 0, 'cannot create more than one notclient per user');
  is_positive_int = function(n) {
    return $u.isNumber(n) && n % 1 === 0 && n > 0;
  };
  is_nonnegative_int = function(n) {
    return $u.isNumber(n) && n % 1 === 0 && n >= 0;
  };
  assert(is_positive_int(user_id), 'user_id must be a positive integer');
  log = function() {
    var msgs;
    msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (NOTCLIENT_DEBUG) {
      return console.log.apply(console, msgs);
    }
  };
  HANDLER_WAIT_MS = 90000;
  MAX_URL_LENGTH = 8096;
  USER_HANDLER_TYPE = 'user';
  SFJ_HANDLER_TYPE = 'list';
  initiated = false;
  INITIAL_CHILLAGE_MS = 1000;
  MAX_CHILLAGE_MS = 5 * 60 * 1000;
  notserver_chillout_ms = 0;
  sleeping_for = function() {
    var notclient_chillout_ms;
    if (consecutive_bad_rounds === 0) {
      notclient_chillout_ms = 0;
    } else {
      notclient_chillout_ms = Math.min(INITIAL_CHILLAGE_MS * Math.pow(2, consecutive_bad_rounds - 1), MAX_CHILLAGE_MS);
    }
    return Math.max(notclient_chillout_ms, notserver_chillout_ms);
  };
  nid = null;
  ns_map = {};
  handler_map = {};
  next_handler_id = 1;
  is_connected = false;
  is_handling = false;
  xhr = null;
  aborted = false;
  unfinished_handler_ids = [];
  slacker_timeout_id = null;
  connect_timeout_id = null;
  new_nid = null;
  new_ns_map = {};
  one_or_more_handler_failures = false;
  consecutive_bad_rounds = 0;
  total_rounds = 0;
  update_ns_map = function(ns_map, new_ns_map) {
    var ns_id, sjid, _results;
    _results = [];
    for (ns_id in new_ns_map) {
      sjid = new_ns_map[ns_id];
      ns_id = parseInt(ns_id, 10);
      assert(is_positive_int(ns_id), "ns_ids must be positive integers: " + ns_id);
      assert(is_nonnegative_int(sjid), "sjids must be nonnegative integers: " + sjid);
      if (ns_map[ns_id] != null) {
        _results.push(ns_map[ns_id] = Math.min(ns_map[ns_id], sjid));
      } else {
        _results.push(ns_map[ns_id] = sjid);
      }
    }
    return _results;
  };
  build_subscribe_params = function() {
    var handler_types, ns, params, sjid;
    assert((nid != null) && !$u.isEmpty(ns_map), 'expected nid and ns_map');
    params = {
      host_int: 0,
      trace: window.location.pathname,
      rev: Constants.SVN_REV
    };
    handler_types = $u.pluck($u.values(handler_map), 'type');
    if (__indexOf.call(handler_types, USER_HANDLER_TYPE) >= 0) {
      params.user_id = user_id;
      params.nid = nid != null ? nid.replace(/^0+(.)/, '$1') : void 0;
    }
    if (__indexOf.call(handler_types, SFJ_HANDLER_TYPE) >= 0) {
      params.ns_map = ((function() {
        var _results;
        _results = [];
        for (ns in ns_map) {
          sjid = ns_map[ns];
          _results.push("" + ns + "_" + sjid);
        }
        return _results;
      })()).join(',');
    }
    if (URI.parse(Constants.SUBSCRIBE_URL).updateQuery(params).toString().length > MAX_URL_LENGTH) {
      delete params.ns_map;
    }
    return params;
  };
  connect = function() {
    var sleep;
    if (!initiated) {
      return;
    }
    sleep = sleeping_for();
    if (sleep > 0) {
      return connect_timeout_id = window.setTimeout(_connect, sleep);
    } else {
      return _connect();
    }
  };
  _connect = function() {
    var params;
    assert(!is_connected && !is_handling, 'connect: invalid state');
    assert(nid >= 0 || !$u.isEmpty(ns_map), "notclient: called connect with nothing to subscribe to");
    log('###########################');
    params = build_subscribe_params();
    if ((params.nid == null) && !params.ns_map) {
      log("nothing to subscribe to. skipping notserver connection.");
      return;
    }
    log('connecting to notserver...');
    is_connected = true;
    total_rounds += 1;
    return xhr = $j.ajax(Constants.SUBSCRIBE_URL, {
      data: params,
      dataType: 'json',
      noDropboxDefaults: true,
      error: function() {
        if (aborted) {
          aborted = false;
          return;
        }
        consecutive_bad_rounds += 1;
        log("error connecting to notserver. bad rounds=" + consecutive_bad_rounds + ".");
        is_connected = false;
        return connect();
      },
      success: function(response) {
        log("notserver connection closed. response:", response);
        is_connected = false;
        if (response.chillout != null) {
          notserver_chillout_ms = parseInt(response.chillout, 10) * 1000;
          log("notserver told us to chill for " + notserver_chillout_ms + "ms");
        } else if (notserver_chillout_ms > 0) {
          log("setting notserver chillout back to 0ms");
          notserver_chillout_ms = 0;
        }
        if (response.ret === 'punt') {
          return connect();
        } else {
          assert(response.ret === 'new', "unknown notserver ret: " + response.ret);
          assert('refresh' in response, 'expected notserver ret:new to have refresh keyword');
          return run_handlers(response.refresh);
        }
      }
    });
  };
  abort = function() {
    if (xhr != null) {
      aborted = true;
      xhr.abort();
      return xhr = null;
    }
  };
  reconnect = function() {
    notserver_chillout_ms = 0;
    is_connected = false;
    is_handling = false;
    abort();
    unfinished_handler_ids = [];
    window.clearTimeout(slacker_timeout_id);
    window.clearTimeout(connect_timeout_id);
    slacker_timeout_id = null;
    connect_timeout_id = null;
    new_nid = null;
    new_ns_map = {};
    one_or_more_handler_failures = false;
    consecutive_bad_rounds = 0;
    return connect();
  };
  reset = function() {
    var old_handler_cutoff;
    initiated = false;
    notserver_chillout_ms = 0;
    nid = null;
    ns_map = {};
    handler_map = {};
    old_handler_cutoff = 0;
    next_handler_id = 1;
    is_connected = false;
    is_handling = false;
    xhr = null;
    aborted = false;
    unfinished_handler_ids = [];
    window.clearTimeout(slacker_timeout_id);
    window.clearTimeout(connect_timeout_id);
    slacker_timeout_id = null;
    connect_timeout_id = null;
    new_nid = null;
    new_ns_map = {};
    one_or_more_handler_failures = false;
    consecutive_bad_rounds = 0;
    return total_rounds = 0;
  };
  run_handlers = function(types) {
    var handler, handler_id, name, triggered_handlers, type, _i, _len, _ref;
    assert(!is_handling && !is_connected, 'run_handlers: invalid state');
    assert(new_nid === null, 'run_handlers: new_nid must start at null');
    assert($u.isEqual(new_ns_map, {}), 'run_handlers: new_ns_map must start at {}');
    assert(!one_or_more_handler_failures, 'expected one_or_more_handler_failures=false');
    is_handling = true;
    log('running handlers...');
    triggered_handlers = $u.filter($u.values(handler_map), function(handler_info) {
      var _ref;
      return _ref = handler_info.type, __indexOf.call(types, _ref) >= 0;
    });
    assert(!$u.isEmpty(triggered_handlers), "notserver sent a ping for unsubscribed activity");
    unfinished_handler_ids = $u.pluck(triggered_handlers, 'handler_id');
    for (_i = 0, _len = triggered_handlers.length; _i < _len; _i++) {
      _ref = triggered_handlers[_i], handler = _ref.handler, handler_id = _ref.handler_id, name = _ref.name, type = _ref.type;
      log("running id=" + handler_id + ", name=" + name + ", type=" + type);
      handler();
    }
    if ($u.isEmpty(unfinished_handler_ids)) {
      return log("all handlers already finished running. no need for a slacker timeout.");
    } else {
      log("all handlers running. slacker timeout set.");
      return slacker_timeout_id = window.setTimeout(report_slackers, HANDLER_WAIT_MS);
    }
  };
  report_slackers = function() {
    var handler_id, _i, _len, _results;
    assert(is_handling && !is_connected, 'called report_slackers in an invalid state.');
    assert(!$u.isEmpty(unfinished_handler_ids, "report_slackers called w/ nothing slackin'"));
    log("found some slackers");
    one_or_more_handler_failures = true;
    _results = [];
    for (_i = 0, _len = unfinished_handler_ids.length; _i < _len; _i++) {
      handler_id = unfinished_handler_ids[_i];
      _results.push(done_handling(handler_id));
    }
    return _results;
  };
  done_handling = function(handler_id) {
    if (__indexOf.call(unfinished_handler_ids, handler_id) < 0) {
      return;
    }
    log("done handling: " + handler_id);
    unfinished_handler_ids = $u.without(unfinished_handler_ids, handler_id);
    if ($u.isEmpty(unfinished_handler_ids)) {
      log("all handlers are done running.");
      is_handling = false;
      window.clearTimeout(slacker_timeout_id);
      if (new_nid != null) {
        log("new nid: " + new_nid);
        nid = new_nid;
      }
      if (!$u.isEmpty(new_ns_map)) {
        log("new ns_map:", new_ns_map);
        ns_map = new_ns_map;
      }
      if (one_or_more_handler_failures) {
        consecutive_bad_rounds += 1;
        log("one or more handler errors. bad_rounds=" + consecutive_bad_rounds);
      } else {
        consecutive_bad_rounds = 0;
      }
      new_nid = null;
      new_ns_map = {};
      one_or_more_handler_failures = false;
      return connect();
    }
  };
  notclient = {
    get_user_id: function() {
      return user_id;
    },
    get_nid: function() {
      return nid;
    },
    get_ns_map: function() {
      return $u.clone(ns_map);
    },
    get_consecutive_bad_rounds: function() {
      return consecutive_bad_rounds;
    },
    get_total_rounds: function() {
      return total_rounds;
    },
    get_notserver_chillout_ms: function() {
      return notserver_chillout_ms;
    },
    get_sleep_ms: sleeping_for,
    subscribe_user: function(params) {
      var handler_id, handler_types, need_reconnect, param, _i, _len, _ref;
      assert(!is_handling, 'adding new handlers from inside handlers is not currently supported');
      _ref = ['name', 'handler'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        assert(params[param], "subscribe_user requires this param be non-falsey: " + param);
      }
      assert($u.isFunction(params.handler), 'handler must be a function');
      log("adding user handler " + params.name);
      handler_types = $u.pluck($u.values(handler_map), 'type');
      need_reconnect = __indexOf.call(handler_types, USER_HANDLER_TYPE) < 0;
      handler_id = next_handler_id++;
      handler_map[handler_id] = {
        handler_id: handler_id,
        handler: params.handler,
        name: params.name,
        type: USER_HANDLER_TYPE
      };
      if (need_reconnect) {
        log("first user handler added, reconnecting");
        reconnect();
      }
      return handler_id;
    },
    subscribe_sfj: function(params) {
      var handler_id, handler_types, need_reconnect, param, _i, _len, _ref;
      assert(!is_handling, 'adding new handlers from inside handlers is not currently supported');
      _ref = ['name', 'handler'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        assert(params[param], "subscribe_sfj requires this param be non-falsey: " + param);
      }
      assert($u.isFunction(params.handler), 'handler must be a function');
      log("adding sfj handler " + params.name);
      handler_types = $u.pluck($u.values(handler_map), 'type');
      need_reconnect = __indexOf.call(handler_types, SFJ_HANDLER_TYPE) < 0;
      handler_id = next_handler_id++;
      handler_map[handler_id] = {
        handler_id: handler_id,
        handler: params.handler,
        name: params.name,
        type: SFJ_HANDLER_TYPE
      };
      if (need_reconnect) {
        log("first sfj handler added, reconnecting");
        reconnect();
      }
      return handler_id;
    },
    handler_success: function(handler_id, params) {
      var handler_type;
      if (__indexOf.call(unfinished_handler_ids, handler_id) < 0) {
        return;
      }
      handler_type = handler_map[handler_id].type;
      if (handler_type === SFJ_HANDLER_TYPE) {
        assert('ns_map' in params, 'ns_map required param is missing');
        assert(!('nid' in params), 'nid is disallowed from SFJ handlers');
        update_ns_map(new_ns_map, params.ns_map);
      } else {
        assert(handler_type === USER_HANDLER_TYPE, "unknown handler type: " + handler_type);
        assert('nid' in params, 'nid required param is missing');
        assert(!('ns_map' in params), 'ns_map is disallowed from user handlers');
        if ((new_nid == null) || params.nid < new_nid) {
          new_nid = params.nid;
        }
      }
      return done_handling(handler_id);
    },
    handler_failure: function(handler_id) {
      log("handler failed. handler_id=" + handler_id);
      if (__indexOf.call(unfinished_handler_ids, handler_id) < 0) {
        return;
      }
      one_or_more_handler_failures = true;
      return done_handling(handler_id);
    },
    handle_visibility_change: function() {
      if (window.document.hidden) {
        return abort();
      } else {
        return reconnect();
      }
    },
    init: function(initial_nid, initial_ns_map) {
      assert(!initiated, 'error: init() has been called twice.');
      nid = initial_nid;
      update_ns_map(ns_map, initial_ns_map);
      initiated = true;
      if (window.document.visibilityState != null) {
        window.document.on('visibilitychange', this.handle_visibility_change);
        if (!window.document.hidden) {
          return connect();
        }
      } else {
        return connect();
      }
    },
    reset: reset,
    abort: abort,
    reconnect: reconnect
  };
  NOTCLIENTS[user_id] = notclient;
  return notclient;
};

//# sourceMappingURL=notserver.map
// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty;

window.Forms = {
  submitOnlyOnce: function() {
    var ret;
    ret = Forms.submitted !== true;
    Forms.submitted = true;
    return ret;
  },
  add_vars: function(form, vars) {
    var elm, k, _results;
    form = $(form);
    _results = [];
    for (k in vars) {
      if (!__hasProp.call(vars, k)) continue;
      elm = $('<input />').attr('type', 'hidden').attr('name', k).val(vars[k]);
      _results.push(form.append(elm));
    }
    return _results;
  },
  parse_error: function(error_dict, field) {
    return error_dict[field].message_text || error_dict[field].message_html;
  },
  collect_form_vars: function(form) {
    var elm, elms, out, value, _i, _len;
    form = $j(form || $j(document.body));
    elms = $.merge(form.find('input'), form.find('textarea'), form.find('select'));
    out = {};
    for (_i = 0, _len = elms.length; _i < _len; _i++) {
      elm = elms[_i];
      if (elm.name && elm.name !== 't') {
        if ($(elm).attr('type') === 'checkbox' && !$(elm).prop('checked')) {
          continue;
        }
        value = $(elm).val();
        if (value) {
          if (typeof value !== "string") {
            value = value.join(",");
          }
          if (out[elm.name] != null) {
            if (typeof out[elm.name] === "string") {
              out[elm.name] = [out[elm.name], value];
            } else {
              out[elm.name].push(value);
            }
          } else {
            out[elm.name] = value;
          }
        }
      }
    }
    return out;
  },
  ajax_submit: function(form, url, success_callback, fail_callback, data_type, more_vars) {
    var params;
    if (form.ajax_submitted) {
      return false;
    }
    form.ajax_submitted = true;
    params = Forms.collect_form_vars(form);
    if (more_vars) {
      $.extend(params, more_vars);
    }
    $.ajax({
      url: url || form.action,
      type: 'POST',
      data: params,
      dataType: data_type || 'text',
      success: function(data, status, req) {
        if (success_callback && typeof success_callback === "function") {
          return success_callback(req, data);
        }
      },
      error: function(req) {
        var error, error_dict;
        if (req) {
          if (req.responseText.indexOf('err:' === 0)) {
            error = req.responseText.substr(4);
            if (error.indexOf('{' === 0)) {
              error_dict = JSON.parse(error);
              Forms.fill_errors(form, error_dict);
            } else {
              alertd(error);
            }
          } else {
            alertd('There was a problem completing this request');
          }
        }
        if (fail_callback && typeof fail_callback === "function") {
          return fail_callback(req);
        }
      },
      complete: function(req) {
        return form.ajax_submitted = false;
      }
    });
    return false;
  },
  clear_errors: function(form) {
    form = form || $(document.body);
    return form.find('.error-removable').remove();
  },
  fill_errors: function(form, error_dict) {
    var elm, error, field, _results;
    error_dict = error_dict || {};
    form = form || $(document.body);
    Forms.clear_errors(form);
    _results = [];
    for (field in error_dict) {
      if (!__hasProp.call(error_dict, field)) continue;
      elm = form.find("[name=" + field + "]") || form.find("[data-error-field-name=" + field + "]");
      if (elm) {
        error = $('<div></div>').attr('class', 'error-message error-removable');
        error.html(Forms.parse_error(error_dict, field));
        _results.push(error.insertBefore(elm));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  },
  postRequest: function(action, vars, options) {
    var form;
    if (vars == null) {
      vars = {};
    }
    if (options == null) {
      options = {};
    }
    assert(action != null, "postRequest missing action");
    vars.t = Cookies.read(Constants.JS_CSRF_COOKIE);
    form = $('<form method="POST"></form>').attr('action', action);
    if (options.target) {
      form.target = options.target;
    }
    $(document.body).append(form);
    Forms.add_vars(form, vars);
    return form.submit();
  }
};

//# sourceMappingURL=forms.map
// Generated by CoffeeScript 1.7.1
window.TwoFactorAuth = {
  login_init: function(sms) {
    return this.login_listen();
  },
  login_listen: function() {
    $('#code').focus();
    return $('#resend-link').on('click', $.proxy(this._resend_twofactor, this));
  },
  _resend_twofactor: function() {
    return $.ajax({
      url: '/twofactor_resend',
      type: 'POST',
      success: (function(_this) {
        return function(ret) {
          switch (ret) {
            case 'OK':
              return Notify.success(_('We sent you another code. It may take a few minutes to arrive.'));
            case 'UNREACHABLE':
              return _this.show_error_unreachable();
            case 'EXPIRED':
              return _this.show_error_expired();
            case 'BADCARRIER':
              return _this.show_error_bad_carrier();
            case 'INVALIDNUMBER':
              return _this.show_error_invalid_number();
            case 'NOTAMOBILE':
              return _this.show_error_not_a_mobile();
          }
        };
      })(this),
      error: (function(_this) {
        return function() {
          return _this._show_error500();
        };
      })(this)
    });
  },
  _show_error: function(msg) {
    return $('.error-message').text(msg);
  },
  show_error_unreachable: function() {
    return this._show_error(_("We couldn't reach your phone number. Are you sure it's correct?"));
  },
  show_error_expired: function() {
    return this._show_error(_("Sorry, your phone code has expired. Please log in again."));
  },
  show_error_bad_carrier: function() {
    return this._show_error(_("Unfortunately, your carrier is not supported at this time."));
  },
  show_error_invalid_number: function() {
    return this._show_error(_("That is not a valid phone number."));
  },
  show_error_not_a_mobile: function() {
    return this._show_error(_("That phone number does not appear to be a valid mobile number."));
  },
  show_error500: function() {
    return this._show_error(_("Sorry, an error occured. Please try again later."));
  }
};

//# sourceMappingURL=twofactor.map
// Generated by CoffeeScript 1.7.1
var category, extension, extensions, _i, _len, _ref, _ref1;

window.BrowseFile = {};

BrowseFile.CATEGORY_TO_TRANSLATION = {
  FILE: _('file'),
  FOLDER: _('folder'),
  SHARED_FOLDER: _('shared folder'),
  PUBLIC_FOLDER: _('folder'),
  IMAGE: _('image'),
  VIDEO: _('video'),
  AUDIO: _('audio'),
  DOCUMENT: _('document'),
  COMPRESSED_FILE: _('archive'),
  CODE: _('code'),
  DISK_IMAGE: _('disk image'),
  EXECUTABLE: _('executable'),
  SHORTCUT: _('shortcut'),
  LINK: _('link'),
  FONT: _('font'),
  SANDBOX: _('app folder')
};

BrowseFile._CATEGORIES = {
  IMAGE: "ai bmp cr2 eps gif ico jpeg jpg nef png psd tif tiff svg svgz",
  VIDEO: "3gp 3gpp 3gpp2 avi dv flv m2t m4v mkv mov mp4 mpeg mpg mts ts vob wmv",
  AUDIO: "aif flac m4a m4p mp3 ogg wav wma",
  DOCUMENT: "cdr csv doc docx docm fla indd keynote numbers otf pages pdf" + " ppt pptx pptm pps ppsx ppsm ps rtf swf txt wpd xls xlsx xlsm",
  COMPRESSED_FILE: "7z bz2 gz gzip rar tar zip",
  CODE: "as as3 c coffee cpp cs css cxx h html html java js less php py rb sass scss sh sql vb xhtml xml",
  DISK_IMAGE: "dmg iso",
  EXECUTABLE: "exe",
  SHORTCUT: "lnk",
  LINK: "url webloc",
  FONT: "ttf"
};

BrowseFile.EXTENSION_TO_CATEGORY = {};

_ref = BrowseFile._CATEGORIES;
for (category in _ref) {
  extensions = _ref[category];
  _ref1 = extensions.trim().split(' ');
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    extension = _ref1[_i];
    BrowseFile.EXTENSION_TO_CATEGORY[extension] = category;
  }
}

//# sourceMappingURL=browse_file.map
// Generated by CoffeeScript 1.7.1
window.Photos = {
  SCROLL_OFFSET: 2400,
  LIGHTBOX_OFFSET: 10,
  POST_SCROLL_WAIT: 1,
  THUMBNAIL_WIDTH: 79,
  THUMB_SELECTOR: "#photos-list .photo-thumb",
  _photos: [],
  _duplicates_map: {},
  _preview_objs: [],
  _num_total: null,
  _selected_index: -1,
  _cursor: null,
  _current_filter: null,
  _last_scroll_timeout: null,
  _prev_date: null,
  _getting_more: false,
  _selected_photos: [],
  _tmpl: null,
  _more_endpoint: "",
  _count_endpoint: "",
  _batch_thumb_endpoints: [],
  init: function(photos, more, cursor) {
    if (!photos.length) {
      $("#cu-empty").show();
      $("#cu-view").hide();
      return;
    }
    this._preload_icons();
    Util.set_screen_width($.proxy(this.set_photos_list_width, this));
    this._more_endpoint = "/more_photos";
    this._count_endpoint = "/photos_count";
    this._tmpl = HTML.tmpl("mobile_gallery_photo_thumb");
    if (more) {
      this._cursor = cursor;
    } else {
      this._cursor = null;
    }
    this._render(photos);
    this._listen();
    return this._get_num_total();
  },
  _preload_icons: function() {
    return Util.preload_image("/static/images/icons/retina-loading.gif");
  },
  set_photos_list_width: function() {
    var photos_list_width;
    photos_list_width = Math.floor(Util.screen_width / this.THUMBNAIL_WIDTH) * this.THUMBNAIL_WIDTH;
    return $("#photos-list").width(photos_list_width);
  },
  _listen: function() {
    $(".photo-thumb").bind("click", $.proxy(this._thumb_click, this));
    $(document).bind(Lightbox.PHOTO_CHANGE_EVT, $.proxy(this._lightbox_event, this));
    $(document).bind(Lightbox.EXIT_SELECT_EVT, $.proxy(this._after_lightbox_close, this));
    $(window).bind("scroll", $.proxy(this._window_scroll, this));
    $(window).bind("scroll", Lightbox.resize_and_update_modal_position);
    return $(window).bind("orientationchange", function() {
      return Util.set_screen_width($.proxy(this.set_photos_list_width, this));
    });
  },
  _render: function(photos) {
    var cur_date, elms, newest_duplicate, photo, prev_date, _i, _len;
    elms = [];
    newest_duplicate = void 0;
    this._update_duplicates_map(photos);
    if (this._prev_date) {
      prev_date = this._prev_date;
    } else {
      prev_date = new Date(photos[0].time_taken);
      elms.push(this._generate_month_header(prev_date));
    }
    for (_i = 0, _len = photos.length; _i < _len; _i++) {
      photo = photos[_i];
      newest_duplicate = this._get_newest(photo.uniqueness_key);
      if (this._photos.indexOf(newest_duplicate) === -1) {
        cur_date = new Date(newest_duplicate.time_taken);
        if (cur_date.getMonth() !== prev_date.getMonth() || cur_date.getFullYear() !== prev_date.getFullYear()) {
          elms.push(this._generate_month_header(cur_date));
        }
        prev_date = cur_date;
        elms.push(this._tmpl({
          photo: newest_duplicate,
          thumbnail_url: newest_duplicate.thumbnail_url,
          subject_uid: Viewer.get_viewer().personal_user.id
        }).toHTML());
        this._photos.push(newest_duplicate);
        this._preview_objs.push(this._get_preview_obj(newest_duplicate));
      }
    }
    this._prev_date = prev_date;
    if (this._cursor) {
      $("#cu-loading").show();
    }
    $("#photos-list").append(elms);
    if (this._num_total) {
      this._set_lightbox_wrap();
    }
    return Util.load_thumbs_in_view(this.THUMB_SELECTOR);
  },
  _reset: function() {
    this._photos = [];
    this._duplicates_map = {};
    this._preview_objs = [];
    this._num_total = null;
    this._cursor = null;
    this._last_scroll_timeout = null;
    this._prev_date = null;
    this._getting_more = false;
    this._clear_selected();
    $("#photos-list").__date();
    return $("#cu-empty").hide();
  },
  _update_duplicates_map: function(photos) {
    return $.each(photos, (function(_this) {
      return function(index, photo) {
        if (_this._duplicates_map[photo.uniqueness_key]) {
          return _this._duplicates_map[photo.uniqueness_key].push(photo);
        } else {
          return _this._duplicates_map[photo.uniqueness_key] = [photo];
        }
      };
    })(this));
  },
  _get_newest: function(uniqueness_key) {
    var dupe, duplicates, newest, _i, _len, _ref;
    duplicates = this._duplicates_map[uniqueness_key];
    if (duplicates.length === 0) {

    } else if (duplicates.length === 1) {
      return duplicates[0];
    } else {
      newest = duplicates[0];
      _ref = duplicates.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dupe = _ref[_i];
        if (dupe.mtime > newest.mtime) {
          newest = dupe;
        }
      }
      return newest;
    }
  },
  _thumb_click: function(e) {
    var thumb_elm, thumb_index;
    thumb_elm = $(e.target).parents(".photo-thumb");
    thumb_index = $(".photo-thumb").index(thumb_elm);
    return this._preview(thumb_index);
  },
  _preview: function(index) {
    if (this._num_total) {
      return Lightbox.show(index);
    } else {
      return setTimeout($.fn.curry(this._preview, this, index), 100);
    }
  },
  _get_num_total: function() {
    return $.ajax({
      url: this._count_endpoint,
      subject_user: Constants.uid,
      type: "POST",
      data: {
        filter: this._current_filter
      },
      success: (function(_this) {
        return function(req) {
          _this._num_total = req;
          Lightbox.init(_this._preview_objs, {
            include_delete: true,
            num_previews: _this._num_total,
            header_selector: "#menu_photos",
            content_selector: "#content_photos"
          });
          return _this._set_lightbox_wrap();
        };
      })(this)
    });
  },
  _set_lightbox_wrap: function() {
    if (this._cursor) {
      return Lightbox.set_no_wrap(true);
    } else {
      return Lightbox.set_no_wrap(false);
    }
  },
  _window_scroll: function() {
    var body_height, load_thumbs_in_view, viewport_height, viewport_top;
    clearTimeout(this._last_scroll_timeout);
    load_thumbs_in_view = function() {
      return Util.load_thumbs_in_view(this.THUMB_SELECTOR);
    };
    this._last_scroll_timeout = setTimeout($.proxy(load_thumbs_in_view, this), this.POST_SCROLL_WAIT);
    if (this._cursor) {
      viewport_top = $(window).scrollTop();
      viewport_height = $(window).height();
      body_height = $(document).height();
      if (viewport_top + viewport_height + this.SCROLL_OFFSET >= body_height) {
        return this._get_more();
      }
    }
  },
  _lightbox_event: function(e, preview_obj) {
    this._selected_index = this._preview_objs.indexOf(preview_obj);
    if (this._cursor && this._selected_index > this._preview_objs.length - this.LIGHTBOX_OFFSET) {
      return this._get_more();
    }
  },
  _after_lightbox_close: function() {
    if (this._selected_index > -1) {
      this._scroll_to_thumb(this._selected_index);
      return this._selected_index = -1;
    }
  },
  _get_more: function() {
    if (this._getting_more) {
      return;
    }
    this._getting_more = true;
    return $.ajax({
      url: this._more_endpoint,
      subject_user: Constants.uid,
      type: "POST",
      data: {
        cursor: this._cursor,
        filter: this._current_filter
      },
      success: (function(_this) {
        return function(req) {
          var resp_dict;
          if ($("#cu-loading")) {
            $("#cu-loading").hide();
          }
          resp_dict = JSON.parse(req);
          if (resp_dict.more) {
            _this._cursor = resp_dict.cursor;
          } else {
            _this._cursor = null;
          }
          _this._render(resp_dict.photos);
          _this._listen();
          _this._getting_more = false;
          if (!_this._num_total) {
            return _this._get_num_total();
          }
        };
      })(this)
    });
  },
  _get_preview_obj: function(photo) {
    var preview_url;
    if (photo.preview_type === "photo" && photo.thumbnail_url) {
      return new PhotoPreview(photo.filename, photo.path, photo.thumbnail_url, URI.parse(photo.href).updateQuery({
        'dl': 1
      }).toString(), photo.href, photo.display_time_taken);
    } else if (photo.preview_type === "video" && photo.thumbnail_url && !Constants.DISABLE_VIDEOS_IN_LIGHTBOX) {
      if (is_iphone()) {
        preview_url = URI({
          path: "/playlist" + photo.path
        }).updateQuery(Constants.UID_PARAM_NAME, Constants.uid).toString();
        return new VideoPreview(photo.filename, photo.path, photo.thumbnail_url, URI.parse(photo.href).updateQuery({
          'dl': 1
        }).toString(), null, photo.display_time_taken, null, preview_url);
      } else {
        return new PhotoPreview(photo.filename, photo.path, photo.thumbnail_url, URI.parse(photo.href).updateQuery({
          'dl': 1
        }).toString(), photo.display_time_taken);
      }
    }
    return null;
  },
  _generate_month_header: function(date) {
    return $("<h1/>", {
      "class": "blue-h2"
    }).text(datetime.format_date(date, "MMMM yyyy"));
  },
  scroll_to_thumb: function(thumb) {
    var thumb_height, thumb_top, viewport_height, viewport_top;
    thumb_top = $(thumb).offset().top;
    thumb_height = $(thumb).height();
    viewport_top = $(window).scrollTop();
    viewport_height = $(window).height();
    if (thumb_top < viewport_top || thumb_top + thumb_height > viewport_top + viewport_height) {
      return setTimeout((function() {
        return window.scrollTo(0, thumb_top - viewport_height / 2);
      }), 1);
    }
  },
  _scroll_to_thumb: function(index) {
    var thumb;
    thumb = $(".photo-thumb")[index];
    if (!thumb) {
      return;
    }
    this.scroll_to_thumb(thumb);
    return Util.load_thumbs_in_view(this.THUMB_SELECTOR);
  }
};

//# sourceMappingURL=photos.map
// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.FilePreview = (function() {
  function FilePreview() {}

  FilePreview.prototype.fail_image_src = "/static/images/preview_fail.png";

  FilePreview.prototype.preload = function() {};

  FilePreview.prototype.render = function() {};

  FilePreview.prototype.show_fail = function(thumbnail_div) {
    var fail_text;
    fail_text = $("<div></div>").append(_("Unable to preview this item.", {
      comment: "preview means showing the item in the same browser window without downloading a copy"
    }));
    return thumbnail_div.append(fail_text);
  };

  return FilePreview;

})();

window.PhotoPreview = (function(_super) {
  __extends(PhotoPreview, _super);

  function PhotoPreview(filename, fq_path, thumbnail_url_tmpl, dl_url, original_url, display_time, shmodel_link) {
    this.filename = filename;
    this.fq_path = fq_path;
    this.thumbnail_url_tmpl = thumbnail_url_tmpl;
    this.dl_url = dl_url;
    this.original_url = original_url;
    this.display_time = display_time;
    this.shmodel_link = shmodel_link;
  }

  PhotoPreview.prototype.fallback = function(e) {
    var img;
    img = $(e.target);
    img.attr({
      src: this.fail_image_src,
      width: 128,
      height: 128
    });
    return this.show_fail(img.parents("div.content-item"));
  };

  PhotoPreview.prototype.preload = function() {
    var img, sized_thumbnail_url;
    sized_thumbnail_url = URI.parse(this.thumbnail_url_tmpl).updateQuery({
      size: image_best_fit_size()
    }).toString();
    Util.preload_image(sized_thumbnail_url, this.fallback.bind2(this));
    img = Util.get_preloaded_image(sized_thumbnail_url);
    img.attr("class", "thumbnail");
    return img;
  };

  PhotoPreview.prototype.render = function() {
    var img, len_src, src_suffix, thumbnail_div;
    img = this.preload();
    thumbnail_div = $("<div/>").append(img);
    len_src = img.attr("src").length;
    src_suffix = img.attr("src").substring(len_src - this.fail_image_src.length, len_src);
    if (src_suffix === this.fail_image_src) {
      this.show_fail(thumbnail_div);
    }
    return thumbnail_div;
  };

  PhotoPreview.prototype.get_elm = function() {
    return $("#file-preview-modal img.thumbnail")[0];
  };

  PhotoPreview.prototype.show_loading = function() {
    var loading;
    if ($("#file-preview-modal .loading-image").length) {
      return;
    }
    loading = "<img class='loading-image' src='/static/images/icons/ajax-loader-black-2x.gif'/>";
    return $("#file-preview-modal .preview-content").append($(loading));
  };

  PhotoPreview.prototype.hide_loading = function() {
    return $("#file-preview-modal .loading-image").remove();
  };

  PhotoPreview.prototype.listen_for_click = function() {};

  return PhotoPreview;

})(FilePreview);

window.VideoPreview = (function(_super) {
  __extends(VideoPreview, _super);

  function VideoPreview(filename, fq_path, thumbnail_url_tmpl, dl_url, original_url, display_time, shmodel_link, preview_url) {
    this.filename = filename;
    this.fq_path = fq_path;
    this.thumbnail_url_tmpl = thumbnail_url_tmpl;
    this.dl_url = dl_url;
    this.original_url = original_url;
    this.display_time = display_time;
    this.shmodel_link = shmodel_link;
    this.preview_url = preview_url;
  }

  VideoPreview.prototype.fallback = function(e) {
    var img;
    img = $(e.target);
    img.attr({
      src: this.fail_image_src,
      width: 128,
      height: 128
    });
    return this.show_fail(img.parents("div.content-item"));
  };

  VideoPreview.prototype.preload = function() {
    var img, sized_thumbnail_url;
    sized_thumbnail_url = URI.parse(this.thumbnail_url_tmpl).updateQuery({
      size: image_best_fit_size()
    }).toString();
    Util.preload_image(sized_thumbnail_url, this.fallback.bind2(this));
    img = Util.get_preloaded_image(sized_thumbnail_url);
    img.attr("class", "thumbnail");
    return img;
  };

  VideoPreview.prototype.render = function() {
    var img, len_src, src_suffix, thumbnail_div, video;
    img = this.preload();
    video = Util.video_elm(this.preview_url, false, img.attr("src"));
    thumbnail_div = $("<div></div>").append("<div class=\"play-button\"><img src=\"/static/images/playbutton2.png\" /></div>").append(img).append(video);
    len_src = img.attr("src").length;
    src_suffix = img.attr("src").substring(len_src - this.fail_image_src.length, len_src);
    if (src_suffix === this.fail_image_src) {
      this.show_fail(thumbnail_div);
    }
    return thumbnail_div;
  };

  VideoPreview.prototype.get_elm = function() {
    return $("#file-preview-modal img.thumbnail")[0];
  };

  VideoPreview.prototype.show_loading = function() {};

  VideoPreview.prototype.hide_loading = function() {};

  VideoPreview.prototype.listen_for_click = function() {
    var video;
    video = $(".content-item video")[0];
    return $(".play-button").bind(Util.desktop_friendly_touchstart, function(e) {
      e.stopPropagation();
      return video.play();
    });
  };

  return VideoPreview;

})(FilePreview);

//# sourceMappingURL=lightbox_previews.map
// Generated by CoffeeScript 1.7.1
window.Lightbox = (function() {
  var block_touch_scroll, current_index, exit_select_evt, file_previews, listening, _TIME_FILENAME_REGEXP, _back, _fade_timer, _fadeout_class, _hide, _inc_index, _is_loaded, _listen, _menu_fade_out, _menu_shown, _next, _options, _preload, _preload_icons, _preload_nearby, _prev, _resize_preview_content, _schedule_fade, _select, _show, _show_menu, _show_menu_and_schedule_fade, _timer, _unlisten, _unselect, _watch_filename_hash;
  file_previews = [];
  current_index = 0;
  listening = false;
  _timer = void 0;
  _TIME_FILENAME_REGEXP = /^\d+\-\d+\-\d+\s+\d+\.\d+\.\d+/;
  _options = void 0;
  _hide = void 0;
  _is_loaded = function(elm) {
    return $(elm).prop("complete") !== false;
  };
  _resize_preview_content = function() {
    var content_elm, dimensions;
    Lightbox.resize_and_update_modal_position();
    content_elm = file_previews[current_index].get_elm();
    if (!content_elm || !_is_loaded(content_elm)) {
      return;
    }
    dimensions = Util.get_preview_img_dimensions(content_elm);
    content_elm = $(content_elm);
    content_elm.css({
      visibility: ""
    });
    if (dimensions) {
      content_elm.css({
        width: dimensions.width + "px"
      });
      return content_elm.css({
        height: dimensions.height + "px"
      });
    } else {
      content_elm.css({
        width: ""
      });
      return content_elm.css({
        height: ""
      });
    }
  };
  _fade_timer = void 0;
  _show_menu_and_schedule_fade = void 0;
  _schedule_fade = void 0;
  _menu_shown = false;
  _fadeout_class = (is_iphone() ? "fadeout-iphone" : "fadeout");
  _menu_fade_out = function() {
    var lightbox;
    if (!_menu_shown) {
      return;
    }
    lightbox = $("#file-preview-modal");
    lightbox.find(".lightbox-menu").addClass(_fadeout_class);
    lightbox.find(".header").addClass(_fadeout_class);
    lightbox.find(".prev").addClass(_fadeout_class);
    lightbox.find(".next").addClass(_fadeout_class);
    lightbox.find(".lightbox-exit").unbind(Util.desktop_friendly_touchstart, _select).unbind("touchend", _unselect).unbind("touchend", _back);
    lightbox.unbind(Util.desktop_friendly_touchend, _menu_fade_out);
    lightbox.bind(Util.desktop_friendly_touchend, _show_menu_and_schedule_fade);
    return _menu_shown = false;
  };
  _show_menu = function() {
    var lightbox;
    if (_fade_timer) {
      clearTimeout(_fade_timer);
    }
    if (_menu_shown) {
      return;
    }
    lightbox = $("#file-preview-modal");
    lightbox.find(".lightbox-menu").removeClass(_fadeout_class);
    lightbox.find(".header").removeClass(_fadeout_class);
    lightbox.find(".prev").removeClass(_fadeout_class);
    lightbox.find(".next").removeClass(_fadeout_class);
    lightbox.find(".lightbox-exit").bind(Util.desktop_friendly_touchstart, _select).bind("touchend", _unselect).bind("touchend", _back);
    lightbox.bind(Util.desktop_friendly_touchend, _menu_fade_out);
    lightbox.unbind(Util.desktop_friendly_touchend, _show_menu_and_schedule_fade);
    return _menu_shown = true;
  };
  _show_menu_and_schedule_fade = function() {
    _show_menu();
    return _schedule_fade();
  };
  _schedule_fade = function() {
    return _fade_timer = setTimeout(_menu_fade_out, 3112);
  };
  _inc_index = function(value) {
    var len;
    len = file_previews.length;
    return (len + (current_index + value) % len) % len;
  };
  _preload = function(index) {
    return file_previews[index].preload();
  };
  _preload_nearby = function() {
    var load_order, position, _i, _len, _results;
    load_order = [1, -1, 2, -2, 3, -3, 4, -4];
    _results = [];
    for (_i = 0, _len = load_order.length; _i < _len; _i++) {
      position = load_order[_i];
      if (Math.abs(position) < file_previews.length) {
        _results.push(_preload(_inc_index(position)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  _show = function(returned_to_start) {
    var elm, modal, preview, preview_div, thumb_click, thumb_elm, view_zoomable_preview;
    assert(current_index < file_previews.length, "Invalid index " + current_index);
    preview = file_previews[current_index];
    elm = preview.render();
    elm.addClass("content-item");
    modal = $("#file-preview-modal");
    preview_div = modal.find(".preview-content");
    thumb_elm = elm.find("img.thumbnail");
    if (preview instanceof PhotoPreview) {
      view_zoomable_preview = function() {
        return window.location.href = URI.parse(preview.thumbnail_url_tmpl).updateQuery({
          size: "1024x768"
        }).toString();
      };
      TouchUtil.doubletap(thumb_elm, view_zoomable_preview);
      TouchUtil.gesturestart(thumb_elm, view_zoomable_preview);
    }
    thumb_elm.hide();
    preview_div.html(elm);
    modal.find(".current_index").text(current_index + 1);
    modal.find(".total").text(_options.num_previews || file_previews.length);
    if (preview.display_time) {
      if (preview.filename.match(_TIME_FILENAME_REGEXP)) {
        modal.find(".filename").text(preview.display_time);
      } else {
        modal.find(".filename").text(preview.filename.snippet(20) + " - " + preview.display_time);
      }
    } else {
      modal.find(".filename").text(preview.filename.snippet(40));
    }
    modal.find(".filename").attr("title", preview.filename);
    if (file_previews.length === 1) {
      modal.find(".prev").hide();
      modal.find(".next").hide();
    } else if (current_index === 0 && _options.no_wrap) {
      modal.find(".prev").hide();
      modal.find(".next").show();
    } else if (current_index === file_previews.length - 1 && _options.no_wrap) {
      modal.find(".prev").show();
      modal.find(".next").hide();
    } else {
      modal.find(".prev").show();
      modal.find(".next").show();
    }
    thumb_click = !Lightbox.shown;
    if (!_is_loaded(thumb_elm)) {
      if (thumb_click) {
        _show_menu();
      }
      preview.show_loading();
      thumb_elm.load(function() {
        if (thumb_click) {
          _schedule_fade();
        }
        preview.hide_loading();
        _resize_preview_content();
        thumb_elm.show();
        return preview.listen_for_click();
      });
    } else {
      if (thumb_click) {
        _show_menu_and_schedule_fade();
      }
      _resize_preview_content();
      thumb_elm.show();
      preview.listen_for_click();
    }
    if (!thumb_click) {
      if (returned_to_start) {
        _show_menu_and_schedule_fade();
      } else {
        _menu_fade_out();
      }
    }
    $(document).trigger(Lightbox.PHOTO_CHANGE_EVT, preview);
    history.replaceState({
      lightbox: true
    }, "", "#f:" + Util.urlquote(file_previews[current_index].filename));
    return _preload_nearby();
  };
  _next = function(e) {
    var button;
    button = $("#file-preview-modal").find(".next");
    button.addClass("pressed");
    if (e) {
      e.stopPropagation();
    }
    if (current_index === file_previews.length - 1 && _options.no_wrap) {
      return;
    }
    setTimeout((function() {
      var return_to_start;
      current_index = _inc_index(1);
      return_to_start = current_index === 0;
      _show(return_to_start);
      return button.removeClass("pressed");
    }), 3);
    return false;
  };
  _prev = function(e) {
    var button;
    button = $("#file-preview-modal").find(".prev");
    button.addClass("pressed");
    if (e) {
      e.stopPropagation();
    }
    if (current_index === 0 && _options.no_wrap) {
      return;
    }
    setTimeout((function() {
      current_index = _inc_index(-1);
      _show();
      return button.removeClass("pressed");
    }), 3);
    return false;
  };
  block_touch_scroll = function() {
    return false;
  };
  _back = void 0;
  _unlisten = function() {
    var lightbox;
    lightbox = $("#file-preview-modal");
    lightbox.find(".next").unbind(Util.desktop_friendly_touchend, _next);
    lightbox.find(".prev").unbind(Util.desktop_friendly_touchend, _prev);
    lightbox.find(".lightbox-exit").unbind(Util.desktop_friendly_touchstart, _select).unbind("touchend", _unselect).unbind("touchend", _back);
    $(window).unbind("popstate", _back);
    $(document).unbind("touchmove", block_touch_scroll);
    clearInterval(_timer);
    return listening = false;
  };
  _select = function(e) {
    return $(e.target).parent().addClass("selected");
  };
  _unselect = function(e) {
    return $(e.target).parent().removeClass("selected");
  };
  _hide = function() {
    var modal;
    if (!Lightbox.shown) {
      return;
    }
    modal = $("#file-preview-modal");
    modal.hide();
    modal.find(".preview-content").empty();
    $(document.body).removeClass("full-no-overflow");
    _menu_fade_out();
    _unlisten();
    return Lightbox.shown = 0;
  };
  exit_select_evt = "db:filepreview:exitselect";
  _back = function(e) {
    e.stopPropagation();
    e.preventDefault();
    if (e && e.originalEvent.type === "popstate" && (!e.originalEvent.state || e.originalEvent.state.lightbox)) {
      return;
    }
    Util.unblackout_background(_options.header_selector, _options.content_selector);
    _hide();
    history.replaceState({}, "", "#");
    $(document).trigger(exit_select_evt, file_previews[current_index]);
    return false;
  };
  _listen = function() {
    var lightbox;
    if (!listening) {
      lightbox = $("#file-preview-modal");
      lightbox.find(".next").bind(Util.desktop_friendly_touchend, _next);
      lightbox.find(".prev").bind(Util.desktop_friendly_touchend, _prev);
      lightbox.find(".lightbox-exit").bind(Util.desktop_friendly_touchstart, _select).bind("touchend", _unselect).bind("touchend", _back);
      $(window).bind("popstate", _back);
      $(document).bind("touchmove", block_touch_scroll);
      listening = true;
    }
    return _timer = setInterval(_resize_preview_content, 500);
  };
  _watch_filename_hash = function() {
    var filename, i, preview, _i, _len;
    filename = URI.parse(window.location.href).fragment.substr(2);
    if (filename) {
      for (i = _i = 0, _len = file_previews.length; _i < _len; i = ++_i) {
        preview = file_previews[i];
        if (filename === preview.filename) {
          current_index = i;
          if (!Lightbox.shown) {
            Lightbox.show();
          }
          return;
        }
      }
      return history.replaceState({}, "", "#");
    }
  };
  _preload_icons = function() {
    var mobile_path;
    mobile_path = "/static/images/mobile/thebest/";
    Util.preload_image(mobile_path + "lightbox_exit.png");
    Util.preload_image(mobile_path + "lightbox_exit_pressed.png");
    Util.preload_image(mobile_path + "lightbox_right_arrow.png");
    Util.preload_image(mobile_path + "lightbox_right_arrow_pressed.png");
    Util.preload_image(mobile_path + "lightbox_left_arrow.png");
    Util.preload_image(mobile_path + "lightbox_left_arrow_pressed.png");
    Util.preload_image("/static/images/icons/ajax-loader-black-2x.gif");
    Util.preload_image("/static/images/playbutton2.png");
    return Util.preload_image("/static/images/preview_fail.png");
  };
  return {
    init: function(file_preview_objs, inst_options) {
      if (Lightbox.shown) {
        return;
      }
      _preload_icons();
      inst_options = inst_options || {};
      _options = {
        include_delete: inst_options.include_delete || false,
        num_previews: inst_options.num_previews || null,
        header_selector: inst_options.header_selector,
        content_selector: inst_options.content_selector
      };
      file_previews = file_preview_objs;
      if (inst_options.start_index !== undefined) {
        return Lightbox.show(inst_options.start_index);
      } else {
        return _watch_filename_hash();
      }
    },
    resize_and_update_modal_position: function() {
      var transformation;
      transformation = "translateY(" + window.scrollY + "px)";
      if ($j("#file-preview-modal").css("position") === "fixed") {
        transformation = "";
      }
      return $("#file-preview-modal").css({
        width: window.innerWidth,
        height: window.innerHeight,
        "-webkit-transform": transformation,
        transform: transformation,
        "-ms-transform": transformation,
        "-moz-transform": transformation,
        "-o-transform": transformation
      });
    },
    show: function(index) {
      if (Lightbox.shown) {
        return;
      }
      assert(file_previews && file_previews.length, "Lightbox.show() requires file preview objects to show");
      _listen();
      if (index !== undefined) {
        current_index = index;
      }
      history.replaceState({}, "", "#");
      history.pushState({
        lightbox: true
      }, "", "#");
      assert(!Lightbox.shown, "Trying to reshow file preview modal");
      $("#file-preview-modal").show();
      Util.blackout_background(_options.header_selector, _options.content_selector);
      $(document.body).addClass("full-no-overflow");
      _show();
      return Lightbox.shown = 1;
    },
    set_no_wrap: function(no_wrap) {
      return _options.no_wrap = no_wrap;
    },
    PHOTO_CHANGE_EVT: "db:lightbox:photo_change",
    EXIT_SELECT_EVT: exit_select_evt,
    reload: false
  };
})();

//# sourceMappingURL=lightbox.map
// Generated by CoffeeScript 1.7.1
window.SharingModel = {
  THUMBNAIL_WIDTH: 79,
  THUMBNAIL_SELECTOR: "#gallery-media .photo-thumb",
  filename: null,
  is_folder: false,
  c2d_vars: {},
  link_url: null,
  preview_objs: [],
  is_my_link: false,
  init: function(acting_uid, display_name, c2d_vars, link_url, share_hint, show_c2d_screen) {
    this.acting_uid = acting_uid;
    this.display_name = display_name;
    this.c2d_vars = c2d_vars;
    this.link_url = link_url;
    this.share_hint = share_hint;
    if (this.share_hint && !show_c2d_screen) {
      this._position_share_hint();
    }
    if (show_c2d_screen) {
      this._show_c2d_menu();
    }
    this._remove_params();
    this._listen();
    this._touch_style();
    if (window.location.hash === "#share") {
      if ($j('#share-menu').length > 0) {
        this._show_share_menu();
      }
      window.location.hash = "";
    }
    return setInterval(Util.resize_inputs, 1000);
  },
  init_file: function() {
    $('#download-menu-button').bind('click', $.proxy(this._show_download_menu, this));
    $("#c2d-menu .back-button").bind('click', $.proxy(this._show_download_menu, this));
    this.is_folder = false;
    this.is_album = false;
    if (!this.c2d_vars.subpath && (this.c2d_vars.item_id == null)) {
      return this.c2d_vars.subpath = '/' + this.display_name;
    }
  },
  init_folder: function(gallery_showing, preview_objs_info, is_album, show_lightbox) {
    this.gallery_showing = gallery_showing;
    this.preview_objs_info = preview_objs_info;
    this.is_album = is_album;
    this.show_lightbox = show_lightbox;
    $('#download-menu-button').bind('click', $.proxy(this._show_c2d_menu, this));
    this.is_folder = true;
    if (this.is_album) {
      DomUtil.fillVal(this.display_name, "album-unshare-name");
    }
    if (this.gallery_showing) {
      Util.set_screen_width($.proxy(this._set_gallery_view_width, this));
      return this._init_gallery(this.preview_objs_info, this.show_lightbox);
    }
  },
  _remove_params: function() {
    var query, uri;
    uri = Browser.get_uri();
    query = uri.getQuery();
    delete query["m"];
    return window.history.replaceState({}, false, uri.toString());
  },
  _listen: function() {
    var remove_link;
    if (this.share_hint) {
      $(window).bind("orientationchange resize", function() {
        return $("#share-hint").hide();
      });
    }
    $("#share-menu-button").bind('click', $.proxy(this._show_share_menu, this));
    $("#owner-menu-button").bind('click', $.proxy(this._show_owner_menu, this));
    $(".cancel-button").bind('click', $.proxy(this._return_to_content, this));
    if ($("#share-menu-button")) {
      $("#share-menu #copy-link-menu-button").bind('click', $.proxy(this._show_copy_link_menu, this));
      $("#share-menu #fb-menu-button").bind('click', $.proxy(this._show_fb_menu, this));
      $("#share-menu #twitter-menu-button").bind('click', $.proxy(this._show_twitter_menu, this));
      $("#copy-link-menu .back-button").bind('click', $.proxy(this._show_share_menu, this));
      $("#fb-menu .back-button").bind('click', $.proxy(this._show_share_menu, this));
      $("#twitter-menu .back-button").bind('click', $.proxy(this._show_share_menu, this));
      $("#twitter-menu #twitter-post-submit").bind('click', $.proxy(this._do_twitter_post, this));
      $("#fb-menu #fb-post-submit").bind('click', $.proxy(this._do_fb_post, this));
      $j("#copy-link-menu #copy-link").on('click', function() {
        return analytics.ViralLogger.log(Viewer.get_viewer().get_user_ids(), 'shmodel', 'send', {
          'src': 'mwshmodel_copy_link',
          'file_type': SharingModel.is_album ? 'collection' : SharingModel.is_folder ? 'folder' : SharingModel.display_name.indexOf(".") === -1 ? 'file' : BrowseFile.EXTENSION_TO_CATEGORY[FilePath.file_extension(SharingModel.display_name).toLowerCase()] || 'file'
        });
      });
      $j("#share-menu .bottom-option").on('click', function() {
        return analytics.ViralLogger.log(Viewer.get_viewer().get_user_ids(), 'shmodel', 'send', {
          'src': 'mwshmodel_share_email',
          'file_type': SharingModel.is_album ? 'collection' : SharingModel.is_folder ? 'folder' : SharingModel.display_name.indexOf(".") === -1 ? 'file' : BrowseFile.EXTENSION_TO_CATEGORY[FilePath.file_extension(SharingModel.display_name).toLowerCase()] || 'file'
        });
      });
    }
    $("#owner-menu #remove-link").bind('click', $.proxy(this._show_remove_link_menu, this));
    $("#remove-link-menu .back-button").bind('click', $.proxy(this._show_owner_menu, this));
    remove_link = function(e) {
      e.preventDefault();
      return $('#remove-link-confirm-form').submit();
    };
    $("#remove-link-menu #remove-link-confirm").bind('click', remove_link);
    $("#remove-link-menu #remove-link-cancel").bind('click', $.proxy(this._return_to_content, this));
    $("#download-menu .c2d-button.download-button").bind('click', (function(_this) {
      return function(e) {
        return _this._show_c2d_menu(e, $(e.target).data('uid'));
      };
    })(this));
    $('#download-menu .c2d-button.login-button').bind('click', (function(_this) {
      return function(e) {
        return _this._show_login_menu(e, true);
      };
    })(this));
    $('#c2d-menu .switch-account-link').bind('click', (function(_this) {
      return function(e) {
        return _this._show_login_menu(e, true);
      };
    })(this));
    $("#login-menu .back-button").bind('click', (function(_this) {
      return function(e) {
        var from_page;
        from_page = $('#login-menu .back-button').data('from-page');
        if (from_page === 'c2d') {
          _this._show_c2d_menu(e);
        } else {
          _this._show_download_menu(e);
        }
        return $('#login-menu .back-button').removeData('from-page');
      };
    })(this));
    $("#register-menu .back-button").bind('click', $.proxy(this._show_c2d_menu, this));
    $("#c2d-menu #c2d-add-button").bind('click', $.proxy(this._do_c2d_wrapper, this));
    $("#c2d-menu #register-menu-button").bind('click', $.proxy(this._show_register_menu, this));
    $("#c2d-menu #login-menu-button").bind('click', $.proxy(this._show_login_menu, this));
    $("#register-menu #c2d-register-form").bind('submit', $.proxy(this._c2d_register, this));
    $("#login-menu #c2d-login-form").bind('submit', $.proxy(this._c2d_login, this));
    $("#twofactor-menu #c2d-twofactor-login-form").bind('submit', $.proxy(this._c2d_twofactor_login, this));
    $('#c2d-menu .switch-account-link').bind('click', (function(_this) {
      return function(e) {
        return _this._show_login_menu(e);
      };
    })(this));
    $('#share-menu .switch-account-link').bind('click', (function(_this) {
      return function(e) {
        return _this._show_share_login_menu(e);
      };
    })(this));
    return $('#share-login-menu .back-button').bind('click', (function(_this) {
      return function(e) {
        return _this._show_share_menu(e);
      };
    })(this));
  },
  _position_share_hint: function() {
    var share_button, share_button_x, share_hint;
    share_hint = $("#share-hint");
    share_button = $("#share-menu-button");
    share_button_x = share_button.offset().left - 70;
    return share_hint.css("left", share_button_x).show();
  },
  _touch_style: function() {
    var add_touch, remove_touch, touch_class;
    touch_class = "touch";
    add_touch = function(e) {
      return $(this).addClass(touch_class);
    };
    remove_touch = function(e) {
      return $(this).removeClass(touch_class);
    };
    $(".menu a").bind('touchstart', add_touch).bind('touchend', remove_touch);
    $("#default-content a.button-primary").bind('touchstart', add_touch).bind('touchend', remove_touch);
    $("#shmodel-nav a.nav-button").bind('touchstart', add_touch).bind('touchend', remove_touch);
    return $(".menu input[type=submit]").bind('touchstart', add_touch).bind('touchend', remove_touch);
  },
  _set_gallery_view_width: function() {
    var gallery_view_width;
    gallery_view_width = Math.floor(Util.screen_width / this.THUMBNAIL_WIDTH) * this.THUMBNAIL_WIDTH;
    return $("#gallery-media").width(gallery_view_width);
  },
  _init_gallery: function(photos, show_lightbox) {
    this._gallery_tmpl = HTML.tmpl('mobile_gallery_photo_thumb');
    this._render_gallery(photos);
    if (show_lightbox) {
      this._gallery_listen();
      return this._init_lightbox(this.preview_objs_info);
    }
  },
  _init_lightbox: function(preview_objs_info) {
    var info, _i, _len;
    for (_i = 0, _len = preview_objs_info.length; _i < _len; _i++) {
      info = preview_objs_info[_i];
      if (info.is_video && is_iphone()) {
        this.preview_objs.push(new VideoPreview(info.filename, info.path, info.thumbnail_url, info.orig_url, URI.parse(info.orig_url).updateQuery({
          dl: "1"
        }).toString(), null, info.shmodel_link, info.preview_url));
      } else {
        this.preview_objs.push(new PhotoPreview(info.filename, info.path, info.thumbnail_url, URI.parse(info.orig_url).updateQuery({
          dl: "1"
        }).toString(), info.orig_url, null, info.shmodel_link));
      }
    }
    return Lightbox.init(this.preview_objs, {
      include_delete: false,
      header_selector: "#shmodel-nav",
      content_selector: "#shmodel-folder-content"
    });
  },
  _render_gallery: function(photos) {
    var elms, photo, _i, _len;
    elms = [];
    for (_i = 0, _len = photos.length; _i < _len; _i++) {
      photo = photos[_i];
      elms.push(this._gallery_tmpl({
        photo: photo,
        thumbnail_url: photo.gallery_thumb,
        file_path: photo.shmodel_link,
        subject_uid: this.acting_uid
      }).toHTML());
    }
    $("#gallery-media").append(elms);
    return Util.load_thumbs_in_view(this.THUMBNAIL_SELECTOR);
  },
  _gallery_listen: function() {
    var orientationchange_callback;
    $("#gallery-media .photo-thumb").bind("click", $.proxy(this._thumb_click, this));
    $(window).bind("scroll", $.fn.curry(Util.load_thumbs_in_view, this, this.THUMBNAIL_SELECTOR));
    orientationchange_callback = $.proxy(this._set_gallery_view_width, this);
    return $(window).bind("orientationchange", function() {
      return Util.set_screen_width(orientationchange_callback);
    });
  },
  _thumb_click: function(e) {
    var thumb_elm, thumb_index;
    thumb_elm = $(e.target).parents(".photo-thumb");
    thumb_index = $(".photo-thumb").index(thumb_elm);
    return Lightbox.show(thumb_index);
  },
  _c2d_register: function(e) {
    var form, success;
    if (e != null) {
      e.preventDefault();
    }
    form = $('#c2d-register-form');
    success = (function(_this) {
      return function(req, ret) {
        set_csrf_token();
        return _this._do_c2d(ret.id);
      };
    })(this);
    return Forms.ajax_submit(form, '/ajax_register', success, false, 'json');
  },
  _c2d_login: function(e) {
    var form, success;
    if (e != null) {
      e.preventDefault();
    }
    form = $('#c2d-login-form');
    success = (function(_this) {
      return function(req, ret) {
        switch (ret.status) {
          case 'OK':
            set_csrf_token();
            return _this._do_c2d(ret.id);
          case 'TWOFACTOR':
            _this._show_twofactor_menu();
            if (ret.last_four_digits) {
              DomUtil.fillVal(ret.last_four_digits, 'last-four-digits');
              $("#c2d-twofactor-login-form").addClass('sms');
              return $("#twofactor-menu #c2d-resend-link").bind('click', $.proxy(_this._c2d_resend_phone_code, _this));
            } else {
              return $('#c2d-twofactor-login-form').removeClass('sms');
            }
            break;
          case 'SSO':
            return window.location = ret.sso_url;
        }
      };
    })(this);
    return Forms.ajax_submit(form, '/ajax_login', success, false, 'json');
  },
  _c2d_resend_phone_code: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    if (this.c2d_is_resending()) {
      return;
    }
    this.c2d_show_resending();
    return $.ajax({
      url: '/twofactor_resend',
      type: 'POST',
      success: (function(_this) {
        return function(ret) {
          switch (ret) {
            case 'OK':
              return Notify.success(_('We sent you another code. It may take a few minutes to arrive.'));
            case 'UNREACHABLE':
              return _this.c2d_show_twofactor_error_unreachable();
            case 'EXPIRED':
              return Notify.error(_('Sorry, your phone code has expired. Please log in again.'));
            case 'BADCARRIER':
              return _this.c2d_show_twofactor_error_bad_carrier();
            case 'INVALIDNUMBER':
              return _this.c2d_show_twofactor_error_invalid_number();
            case 'NOTAMOBILE':
              return _this.c2d_show_twofactor_error_not_a_mobile();
          }
        };
      })(this),
      error: (function(_this) {
        return function() {
          return _this.c2d_show_twofactor_error500();
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.c2d_hide_resending();
        };
      })(this)
    });
  },
  _c2d_twofactor_login: function(e) {
    var failure, form, success;
    e.preventDefault();
    if (!$('#c2d-twofactor-code').val()) {
      this.c2d_show_twofactor_error_invalid();
      return;
    }
    form = $('#c2d-twofactor-login-form');
    success = (function(_this) {
      return function(req, ret) {
        switch (ret.status) {
          case 'OK':
            set_csrf_token();
            return _this._do_c2d(ret.id);
          case 'INVALID':
            return _this.c2d_show_twofactor_error_invalid();
          case 'EXPIRED':
            return Notify.error(_('Sorry, your phone code has expired. Please log in again.'));
        }
      };
    })(this);
    failure = $.proxy(this.c2d_show_twofactor_error500, this);
    return Forms.ajax_submit(form, '/ajax_verify_code', success, failure, 'json');
  },
  c2d_show_twofactor_error: function(msg) {
    var error_container;
    error_container = $('#c2d-twofactor-error');
    return error_container.text(msg);
  },
  update_c2d_working_msg: (function(_this) {
    return function(progress_str) {
      var suffix, working_msg;
      if (!_this.num_dots) {
        _this.num_dots = 0;
      }
      suffix = Array(_this.num_dots + 1).join('.');
      working_msg = _("Saving to your Dropbox...");
      Notify.success(working_msg + suffix);
      return _this.num_dots = (_this.num_dots + 1) % 5;
    };
  })(this),
  _do_c2d_wrapper: function() {
    $('#c2d-form').hide();
    $('#c2d-working').show();
    this.update_c2d_working_msg();
    return this._do_c2d(Constants.uid);
  },
  _do_c2d: function(user_id) {
    var error_handler, success_handler;
    success_handler = function(ret) {
      return window.location.href = ret;
    };
    error_handler = (function(_this) {
      return function(error_message) {
        _this._return_to_content();
        return setTimeout((function() {
          return Notify.error(error_message || _("Sorry, an error occurred. Please try again later."));
        }), 400);
      };
    })(this);
    return $.ajax({
      url: URI({
        path: '/sm/c2d'
      }),
      type: 'POST',
      data: this.c2d_vars,
      subject_user: user_id,
      success: (function(_this) {
        return function(ret) {
          var error;
          if (ret.indexOf('err:') === 0) {
            error = ret.substr(4);
            error_handler(error);
            return;
          }
          if (ret.indexOf('async_task_started:') === 0) {
            return Util.watch_async_task(user_id, ret.substr(19), success_handler, _this.update_c2d_working_msg, error_handler);
          }
          return success_handler(ret);
        };
      })(this)
    });
  },
  _handle_embedded_response: function(is_error, body) {
    var args, iframe, src;
    iframe = document.createElement("iframe");
    args = {
      is_error: is_error,
      body: body
    };
    src = "db-comms://" + encodeURIComponent(JSON.stringify(args));
    iframe.setAttribute("src", src);
    iframe.setAttribute("height", "1px");
    iframe.setAttribute("width", "1px");
    document.documentElement.appendChild(iframe);
    iframe.parentNode.removeChild(iframe);
    return iframe = null;
  },
  c2d_show_twofactor_error500: function() {
    return this.c2d_show_twofactor_error(_("Sorry, an error occured. Please try again later."));
  },
  c2d_show_twofactor_error_bad_carrier: function() {
    return this.c2d_show_twofactor_error(_("Unfortunately, your carrier is not supported at this time."));
  },
  c2d_show_twofactor_error_invalid_number: function() {
    return this.c2d_show_twofactor_error(_("That is not a valid phone number."));
  },
  c2d_show_twofactor_error_not_a_mobile: function() {
    return this.c2d_show_twofactor_error(_("That phone number does not appear to be a valid mobile number."));
  },
  c2d_show_twofactor_error_unreachable: function() {
    return this.c2d_show_twofactor_error(_("We couldn't reach your phone number. Are you sure it's correct?"));
  },
  c2d_show_twofactor_error_invalid: function() {
    return this.c2d_show_twofactor_error(_("Invalid code."));
  },
  c2d_is_resending: function() {
    return $('#c2d-resend-link').hasClass('resending');
  },
  c2d_show_resending: function() {
    return $('#c2d-resend-link').addClass('resending');
  },
  c2d_hide_resending: function() {
    return $('#c2d-resend-link').removeClass('resending');
  },
  _get_thumbnail_type: function() {
    var category, ext;
    if (this.display_name.indexOf(".") === -1) {
      return false;
    }
    ext = FilePath.file_extension(this.display_name).toLowerCase();
    category = BrowseFile.EXTENSION_TO_CATEGORY[ext];
    if (category && (category === "IMAGE" || category === "VIDEO")) {
      return BrowseFile.CATEGORY_TO_TRANSLATION[category];
    }
    return false;
  },
  _hide_behind: function() {
    $("#shmodel-nav").hide();
    $("#shmodel-content-area").hide();
    return $(".menu").hide();
  },
  _return_to_content: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    $('#login-menu .back-button').removeData('back-page');
    $(".menu").hide();
    $("#shmodel-nav").show();
    return $("#shmodel-content-area").show();
  },
  _show_share_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    if (this.share_hint) {
      $("#share-hint").hide();
    }
    return $("#share-menu").show();
  },
  _show_copy_link_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#copy-link-menu").show();
  },
  _show_fb_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#fb-menu").show().find("#fb-post-input").focus();
  },
  _show_twitter_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    this._populate_twitter_input();
    return $("#twitter-menu").show().find("#twitter-post-input").focus();
  },
  _show_owner_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#owner-menu").show();
  },
  _show_remove_link_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#remove-link-menu").show();
  },
  _show_download_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#download-menu").show();
  },
  _show_c2d_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    $('#login-menu .back-button').data('from-page', 'c2d');
    this._hide_behind();
    return $("#c2d-menu").show();
  },
  _show_register_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#register-menu").show().find("#fname").focus();
  },
  _show_login_menu: function(e, focus_password) {
    var login_menu;
    if (focus_password == null) {
      focus_password = false;
    }
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    login_menu = $('#login-menu').show();
    if (focus_password) {
      return login_menu.find('#login-password').focus();
    } else {
      return login_menu.find("#login-email").focus();
    }
  },
  _show_share_login_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $('#share-login-menu').show().find('#login-password').focus();
  },
  _show_twofactor_menu: function(e) {
    if (e != null) {
      e.preventDefault();
    }
    this._hide_behind();
    return $("#twofactor-menu").show().find("#c2d-twofactor-code").focus();
  },
  _do_fb_post: function(e) {
    var msg;
    if (e != null) {
      e.preventDefault();
    }
    msg = $('#fb-post-input').val();
    if (!msg) {
      Notify.error(_('Please enter a Facebook post'));
      return;
    }
    if (FacebookOAuth.authed_user_id == null) {
      FacebookOAuth.redirect_to_post(SharingModel.link_url);
      return;
    }
    return FacebookOAuth.post(msg, SharingModel.link_url, (function(_this) {
      return function() {
        _this._return_to_content();
        Notify.success(_('Successfully posted to Facebook'));
        return analytics.ViralLogger.log(Viewer.get_viewer().get_user_ids(), 'shmodel', 'send', {
          'src': 'mwshmodel_fb_post',
          'file_type': SharingModel.is_album ? 'collection' : SharingModel.is_folder ? 'folder' : SharingModel.display_name.indexOf(".") === -1 ? 'file' : BrowseFile.EXTENSION_TO_CATEGORY[FilePath.file_extension(SharingModel.display_name).toLowerCase()] || 'file'
        });
      };
    })(this));
  },
  _do_twitter_post: function(e) {
    var msg;
    if (e != null) {
      e.preventDefault();
    }
    msg = $("#twitter-post-input").val();
    if (!msg) {
      Notify.error(_('Please enter a Twitter post'));
      return;
    } else if (msg.length > 140) {
      Notify.error(_('Your post must be 140 characters or less'));
      return;
    }
    if (!Twitter.has_authed) {
      Twitter.redirect_to_post(msg);
      return;
    }
    return Twitter.custom_post(msg, (function(_this) {
      return function() {
        _this._return_to_content();
        Notify.success(_('Successfully posted to Twitter'));
        return analytics.ViralLogger.log(Viewer.get_viewer().get_user_ids(), 'shmodel', 'send', {
          'src': 'mwshmodel_twitter',
          'file_type': SharingModel.is_album ? 'collection' : SharingModel.is_folder ? 'folder' : SharingModel.display_name.indexOf(".") === -1 ? 'file' : BrowseFile.EXTENSION_TO_CATEGORY[FilePath.file_extension(SharingModel.display_name).toLowerCase()] || 'file'
        });
      };
    })(this), Constants.uid);
  },
  _populate_twitter_input: function() {
    var msg, thumbnail_type;
    if (SharingModel.is_folder) {
      msg = _('Just shared some files using @Dropbox');
    } else {
      thumbnail_type = SharingModel._get_thumbnail_type();
      if (thumbnail_type && thumbnail_type === BrowseFile.CATEGORY_TO_TRANSLATION.IMAGE) {
        msg = _("Just shared an image using @Dropbox");
      } else {
        msg = _("Just shared a file using @Dropbox");
      }
    }
    $("#twitter-menu #twitter-post-input").val(msg + ' ' + SharingModel.link_url);
    return Util.track_twitter_chars_left("twitter-post-input", 140);
  }
};

//# sourceMappingURL=links.map
// Generated by CoffeeScript 1.7.1
window.ShmodelPreview = {
  init_photo: function(preview_link, dl_link) {
    var img, view_zoomable_preview;
    img = $("#preview-box #preview-img").attr('src', preview_link)[0];
    setInterval($.fn.curry(this._resize_preview_img, this, preview_link), 500);
    view_zoomable_preview = function() {
      return window.location.href = preview_link;
    };
    TouchUtil.doubletap(img, view_zoomable_preview);
    return TouchUtil.gesturestart(img, view_zoomable_preview);
  },
  _resize_preview_img: function(preview_link) {
    var dims, height, preview_img, width;
    preview_img = $("#preview-box #preview-img");
    if (preview_img.attr('src') === preview_link) {
      dims = Util.get_preview_img_dimensions(preview_img[0]);
      width = dims ? dims.width : '';
      height = dims ? dims.height : '';
      return $(preview_img).width(width).height(height).show();
    }
  }
};

//# sourceMappingURL=shmodel_preview.map
// Generated by CoffeeScript 1.7.1
window.Twitter = {
  redirect_to_post: function(msg) {
    return window.open("http://www.twitter.com/home?status=" + encodeURI(msg));
  },
  custom_post: function(msg, success) {
    if (success) {
      this.onPostSuccessCallback = success;
    }
    if (!msg) {
      return;
    }
    assert(msg, "Twitter message doesn't exist");
    return this.post(msg);
  },
  post: function(msg) {
    var form, success, uri;
    assert(msg, "Twitter message is empty");
    form = $('#twitter-post-form');
    success = (function(_this) {
      return function(ret) {
        if (ret.responseText === 'login') {
          _this.redirect_to_post(msg);
        } else {
          if (_this.onPostSuccessCallback) {
            return _this.onPostSuccessCallback();
          }
        }
      };
    })(this);
    uri = URI({
      path: '/twitter_post'
    }).updateQuery(Constants.UID_PARAM_NAME, Constants.uid);
    return Forms.ajax_submit(form, uri.toString(), success, Constants.uid);
  }
};

window.FacebookOAuth = {
  redirect_to_post: function(url) {
    return window.open("http://www.facebook.com/sharer.php?u=" + encodeURI(url));
  },
  post: function(msg, url, success) {
    var form, more_vars;
    if (success) {
      this.onPostSuccessCallback = success;
    }
    assert(msg, "Facebook post is empty");
    assert(url, "Link is missing");
    form = $('#fb-post-form');
    success = (function(_this) {
      return function(ret) {
        if (ret.responseText !== 'ok') {
          _this.redirect_to_post(url);
          return;
        }
        if (_this.onPostSuccessCallback) {
          return _this.onPostSuccessCallback();
        }
      };
    })(this);
    more_vars = {
      link: url
    };
    return Forms.ajax_submit(form, '/fb/post', success, false, false, more_vars);
  }
};

//# sourceMappingURL=social.map
// Generated by CoffeeScript 1.7.1
window.viewer = Viewer.get_viewer();

//# sourceMappingURL=viewer_shim.map
// Generated by CoffeeScript 1.7.1
var handler, _i, _len, _ref;

if (window._jquery_ready_handlers) {
  _ref = window._jquery_ready_handlers;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    handler = _ref[_i];
    jQuery(handler);
  }
}

//# sourceMappingURL=endscript.map
});