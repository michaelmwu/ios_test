// Generated by CoffeeScript 1.7.1
define(['jquery', 'modules/clean/viewer', 'modules/clean/ajax'], function($j, Viewer, ajax) {
  var BrowseActionsContextMenuLogger, SearchClientActivityLogger, SharedFolderActivityLogger, TeamsWebActionsLogger, UserActivityLogger, ViralLogger, WebMiscActivityLogger, exports, get_uids_for_logging;
  get_uids_for_logging = function(preferred_uid) {
    var uids, user, viewer;
    viewer = new Viewer(Constants._viewer_properties);
    if (!preferred_uid) {
      uids = (function() {
        var _i, _len, _ref, _results;
        _ref = viewer.get_users();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          _results.push(user.id);
        }
        return _results;
      })();
    } else {
      uids = [preferred_uid];
    }
    return uids;
  };
  BrowseActionsContextMenuLogger = {
    log: function(files, action) {
      var file, file_count, folder_count, _i, _len;
      folder_count = 0;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.dir) {
          folder_count++;
        }
      }
      file_count = files.length - folder_count;
      return ajax.AuthenticatedRequest({
        url: '/browse_actions_context_menu_logger',
        data: {
          file_count: file_count,
          folder_count: folder_count,
          action: action
        }
      });
    }
  };
  SearchClientActivityLogger = {
    log: function(event_name, for_uid, log_values) {
      if (log_values == null) {
        log_values = {};
      }
      return ajax.AuthenticatedRequest({
        url: "/searchclientlogger",
        subject_user: for_uid,
        data: {
          event_name: event_name,
          action_type: log_values['action_type'],
          displayed: log_values['displayed'],
          failure_type: log_values['failure_type'],
          file_nsid: log_values['file_nsid'],
          file_sjid: log_values['file_sjid'],
          firefly: log_values['firefly'],
          infinite_scroll: log_values['infinite_scroll'],
          latency: log_values['latency'],
          match_type: log_values['match_type'],
          path_scoped: log_values['path_scoped'],
          position: log_values['position'],
          query_string: log_values['query_string'],
          request_id: log_values['request_id'],
          result_count: log_values['result_count'],
          search_type: log_values['search_type'],
          viewport: log_values['viewport']
        }
      });
    }
  };
  SharedFolderActivityLogger = {
    flow_id: null,
    log: function(platform, event_name, active_user, extra, reset_flow_id) {
      var date;
      if (active_user == null) {
        active_user = null;
      }
      if (extra == null) {
        extra = {};
      }
      if (reset_flow_id == null) {
        reset_flow_id = false;
      }
      if (reset_flow_id || this.flow_id === null) {
        date = new Date();
        this.flow_id = (date.getTime()).toString() + (Math.random()).toString();
        this.flow_id = this.flow_id.replace('.', '');
      }
      return ajax.AuthenticatedRequest({
        url: '/sflogger',
        data: {
          platform: platform,
          event_name: event_name,
          extra: JSON.stringify(extra),
          active_uid: active_user != null ? active_user.id : null,
          flow_id: this.flow_id
        }
      });
    }
  };
  TeamsWebActionsLogger = {
    log: function(event_name, extra, post_handler, for_uid) {
      var for_uids;
      if (for_uid == null) {
        for_uid = null;
      }
      for_uids = get_uids_for_logging(for_uid);
      return ajax.AuthenticatedRequest({
        url: "/teamswalogger",
        data: {
          event_name: event_name,
          extra: JSON.stringify(extra),
          for_uids: JSON.stringify(for_uids)
        },
        success: post_handler ? post_handler : void 0,
        error: post_handler ? post_handler : void 0
      });
    }
  };
  UserActivityLogger = {
    log: function(platform, event_name, extra, for_uid) {
      var for_uids;
      if (for_uid == null) {
        for_uid = null;
      }
      for_uids = get_uids_for_logging(for_uid);
      return ajax.AuthenticatedRequest({
        url: '/ualogger',
        data: {
          platform: platform,
          event_name: event_name,
          extra: JSON.stringify(extra),
          for_uids: JSON.stringify(for_uids)
        }
      });
    }
  };
  ViralLogger = {
    log: function(user_ids, viral_type, action, extra) {
      return ajax.AuthenticatedRequest({
        url: '/virallogger',
        data: {
          user_ids: JSON.stringify(user_ids),
          viral_type: viral_type,
          action: action,
          extra: JSON.stringify(extra || {})
        }
      });
    }
  };
  WebMiscActivityLogger = {
    log: function(event_name, extra, for_uid) {
      var for_uids;
      if (for_uid == null) {
        for_uid = null;
      }
      for_uids = get_uids_for_logging(for_uid);
      return ajax.AuthenticatedRequest({
        url: '/misclogger',
        data: {
          event_name: event_name,
          extra: JSON.stringify(extra),
          for_uids: JSON.stringify(for_uids)
        }
      });
    }
  };
  exports = {
    BrowseActionsContextMenuLogger: BrowseActionsContextMenuLogger,
    SearchClientActivityLogger: SearchClientActivityLogger,
    SharedFolderActivityLogger: SharedFolderActivityLogger,
    TeamsWebActionsLogger: TeamsWebActionsLogger,
    UserActivityLogger: UserActivityLogger,
    ViralLogger: ViralLogger,
    WebMiscActivityLogger: WebMiscActivityLogger
  };
  window.analytics = exports;
  return exports;
});

//# sourceMappingURL=analytics.map
