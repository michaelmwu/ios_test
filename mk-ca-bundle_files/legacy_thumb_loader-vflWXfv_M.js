// Generated by CoffeeScript 1.7.1
define(['jquery', 'modules/clean/photos/batch_thumb_loader', 'modules/clean/sprite'], function($j, BatchThumbLoader, Sprite) {
  var LegacyBatchThumbLoader;
  LegacyBatchThumbLoader = {
    MAX_THUMB_BATCH_REQUESTS: 24,
    batch_load_thumbs: function(image_elms, batch_size, on_thumb_load, log_batch_thumb_load) {
      var $img, elm, elms_to_queue, src, thumb_url, to_fetch, _base, _i, _j, _len, _len1;
      to_fetch = $j.grep(image_elms, function(elm) {
        return $j(elm).data('src');
      });
      this.img_map = {};
      for (_i = 0, _len = to_fetch.length; _i < _len; _i++) {
        elm = to_fetch[_i];
        src = String($j(elm).data('src'));
        if ((_base = this.img_map)[src] == null) {
          _base[src] = [];
        }
        this.img_map[src].push(elm);
      }
      if (this.instance) {
        this.instance.reset({
          batch_size: batch_size,
          batch_logger: log_batch_thumb_load
        });
      } else {
        this.instance = new BatchThumbLoader({
          batch_size: batch_size,
          max_parallel_requests: this.MAX_THUMB_BATCH_REQUESTS,
          on_batch: (function(_this) {
            return function(urls) {
              var $img, url, _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {
                url = urls[_j];
                $img = $j(_this.img_map[url]);
                $img.data('src', null);
                _results.push($img.data('loading-src', url));
              }
              return _results;
            };
          })(this),
          batch_logger: log_batch_thumb_load
        });
      }
      elms_to_queue = [];
      for (_j = 0, _len1 = to_fetch.length; _j < _len1; _j++) {
        elm = to_fetch[_j];
        $img = $j(elm);
        thumb_url = $img.data('src');
        this.instance.queue_thumb(thumb_url, (function(thumb_url, $img, image_src, early_exit) {
          if (!early_exit && !$img.data('loading-src')) {
            return;
          }
          $img.data("loading-src", null);
          if (image_src.indexOf('data:image') === 0) {
            $img.attr('src', image_src);
            return typeof on_thumb_load === "function" ? on_thumb_load($img[0]) : void 0;
          } else {
            $img.error(function() {
              return $img.attr('src', $img.data('fail-src') || Sprite.SPACER);
            });
            $img.load(function() {
              return typeof on_thumb_load === "function" ? on_thumb_load($img[0]) : void 0;
            });
            return $img.attr('src', image_src);
          }
        }).bind(this, thumb_url, $img));
      }
      return this.instance.flush();
    },
    clear_all_pending_batches: function() {
      var _ref;
      return (_ref = this.instance) != null ? _ref.clear() : void 0;
    }
  };
  window.LegacyBatchThumbLoader = LegacyBatchThumbLoader;
  return LegacyBatchThumbLoader;
});

//# sourceMappingURL=legacy_thumb_loader.map
