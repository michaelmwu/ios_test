// Generated by CoffeeScript 1.7.1
define('modules/core/exception',[], function() {
  var JSException;
  JSException = (function() {
    function JSException() {}

    JSException.strip_comments = function(js) {
      return js.replace(/\/\/.*/g, "").replace(/\/\*[\s\S]*?\*\//g, "");
    };

    JSException.fn_body = function(f) {
      var fbody;
      fbody = JSException.strip_comments(f.toString());
      fbody = fbody.replace(/[\s]+/g, " ");
      if (fbody[0] === "(") {
        fbody = fbody.substr(1);
      }
      if (fbody[fbody.length - 1] === ")") {
        fbody = fbody.substr(0, fbody.length - 1);
      }
      fbody = fbody.replace("function (", "function(");
      return fbody;
    };

    JSException.stackTrace = function() {
      var caller, err, fingerprint, out, seen;
      out = [];
      seen = {};
      caller = arguments.callee.caller;
      while (caller) {
        if (caller.__tb_ajax_info__) {
          out.unshift("Ajax.DBRequest: " + caller.__tb_ajax_info__);
          break;
        }
        if (caller.__tb__) {
          out = caller.__tb__.concat(out);
          break;
        }
        fingerprint = JSException.fn_body(caller);
        if (fingerprint in seen) {
          break;
        }
        seen[fingerprint] = true;
        out.unshift(fingerprint);
        try {
          caller = caller.caller;
        } catch (_error) {
          err = _error;
          caller = null;
          break;
        }
      }
      return out;
    };

    JSException.__callbacks = [];

    JSException.registerOnFailedAssert = function(onFailedAssertion) {
      return this.__callbacks.push(onFailedAssertion);
    };

    JSException.reportException = function(e, f, l, tb, force, tags) {

      /*global: active_user_loaded leaked from Browse */
      var data, stack, stack_str;
      if (!window.active_user_loaded) {
        window.an_error_happened_before_loading = true;
      } else {
        window.an_error_happened_after_loading = true;
      }
      if ((window.reported_exception == null) || force) {
        stack_str = "";
        if (!tb) {
          try {
            stack = JSException.stackTrace();
            stack.pop();
            stack.pop();
            tb = stack.join("\\n");
          } catch (_error) {}
        }
        if (!tags) {
          tags = [];
        }

        /*global: jQuery may or may not exist, doesn't matter */

        /*global: Trace may or may not exist, doesn't matter */
        data = {
          e: e,
          f: f || window.location.href,
          l: l || "",
          loc: window.location.href,
          ref: typeof Constants !== "undefined" && Constants !== null ? Constants.referrer : void 0,
          tb: tb,
          trace: typeof Trace !== "undefined" && Trace !== null ? Trace.get() : void 0,
          tags: JSON.stringify(tags)
        };
        if (typeof jQuery !== "undefined" && jQuery !== null) {
          if (typeof jQuery.ajax === "function") {
            jQuery.ajax({
              url: "/jse",
              type: "POST",
              data: data
            });
          }
        }
        window.reported_exception = e;
        if (!(typeof Constants !== "undefined" && Constants !== null ? Constants.IS_PROD : void 0) && window.sessionStorage) {
          data.source = 'exception.coffee';
          return window.sessionStorage.setItem('reported_exception', JSON.stringify(data));
        }
      }
    };

    JSException.alert = function(x) {
      if (typeof jQuery !== "undefined" && jQuery !== null) {
        if (typeof jQuery.ajax === "function") {
          jQuery.ajax({
            url: "/tormod",
            type: "POST",
            data: {
              tor: "" + x,
              mod: window.location.href,
              ssk: JSException.stackTrace().join("\n\n"),
              oog: document.documentElement.innerHTML
            }
          });
        }
      }
      return window.alertd(x);
    };

    JSException.alertd = function(x) {
      return window.alertd(x);
    };

    JSException.assert = function(cond, msg, force_report, exc_tags, should_throw) {
      var callback, stack, _i, _len, _ref;
      if (force_report == null) {
        force_report = true;
      }
      if (exc_tags == null) {
        exc_tags = [];
      }
      if (should_throw == null) {
        should_throw = true;
      }
      if (!cond) {
        msg = "Assertion Error: " + msg;
        if (!(typeof Constants !== "undefined" && Constants !== null ? Constants.IS_PROD : void 0)) {
          if (typeof console !== "undefined" && console !== null) {
            if (typeof console.trace === "function") {
              console.trace();
            }
          }
          alertd(msg);
        }
        stack = JSException.stackTrace();
        stack.pop();
        JSException.reportException(msg, window.location.href, "", stack.join("\n"), force_report, exc_tags);
        _ref = JSException.__callbacks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          callback(msg, stack);
        }
        if (should_throw) {
          throw msg;
        }
      }
    };

    return JSException;

  })();
  window.onerror = function(e, f, l) {
    return JSException.reportException(e, f, l);
  };
  window.alertd = window.alert;
  window.alert = JSException.alert;
  window.assert = JSException.assert;
  window.reportException = JSException.reportException;
  window.stackTrace = JSException.stackTrace;
  return JSException;
});

//# sourceMappingURL=exception.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/uri',['modules/core/exception'], function(_arg) {
  var QueryComponent, URI, assert;
  assert = _arg.assert;
  URI = (function() {
    function URI(x, y) {
      var k, overrides, params, v;
      if (!(this instanceof URI)) {
        return new URI(x, y);
      }
      this._query = new QueryComponent;
      params = {};
      if (typeof x === 'string' || x instanceof URI) {
        if (!(typeof Constants !== "undefined" && Constants !== null ? Constants.IS_PROD : void 0)) {
          throw new Error('URI/uri string passed into URI constructor.  Use URI.parse instead.');
        }
        params = URI.parse(x).toObject();
      } else if (typeof x === 'object') {
        params = x;
      }
      if (y && !(typeof Constants !== "undefined" && Constants !== null ? Constants.IS_PROD : void 0)) {
        throw new Error('Multiple arguments passed into URI constructor.');
      }
      overrides = y || {};
      for (k in overrides) {
        v = overrides[k];
        params[k] = v;
      }
      this.initFromObject(params);
    }

    URI.prototype.initFromObject = function(_arg1) {
      var query, scheme, _ref;
      _ref = _arg1 != null ? _arg1 : {}, scheme = _ref.scheme, this.authority = _ref.authority, this.path = _ref.path, query = _ref.query, this.fragment = _ref.fragment;
      this.setScheme(scheme);
      return this.setQuery(query);
    };

    URI.parse = function(uri_string) {
      var matches, uri, _authority, _fragment, _path, _query_string, _scheme, _uri;
      assert(uri_string != null, 'must pass in a valid url-encoded string');
      matches = String(uri_string).match(URI.REGEXP) || [];
      _uri = matches[0], _scheme = matches[1], _authority = matches[2], _path = matches[3], _query_string = matches[4], _fragment = matches[5];
      uri = new URI();
      uri.setScheme(_scheme);
      uri.setAuthority(URI.decode(_authority));
      uri.setPath(URI.decode(_path));
      uri.setQuery(QueryComponent.parse_string(_query_string));
      uri.setFragment(URI.decode(_fragment));
      return uri;
    };

    URI.prototype.getScheme = function() {
      return this.scheme || '';
    };

    URI.prototype.setScheme = function(scheme) {
      assert(!scheme || scheme.match(URI.SCHEME_REGEXP, 'Invalid scheme'));
      this.scheme = scheme;
      return this;
    };

    URI.prototype.getAuthority = function() {
      return this.authority || '';
    };

    URI.prototype.setAuthority = function(authority) {
      this.authority = authority;
      return this;
    };

    URI.prototype.getPath = function() {
      return this.path || '';
    };

    URI.prototype.setPath = function(path) {
      this.path = path;
      return this;
    };

    URI.prototype.getFragment = function() {
      return this.fragment || '';
    };

    URI.prototype.setFragment = function(fragment) {
      this.fragment = fragment;
      return this;
    };

    URI.prototype.getQuery = function() {
      return this._query.dict;
    };

    URI.prototype.setQuery = function(query) {
      if (query == null) {
        query = {};
      }
      this._query = new QueryComponent(query);
      return this;
    };

    URI.prototype.updateQuery = function(first, second) {
      if (second == null) {
        second = null;
      }
      this._query.add(first, second);
      return this;
    };

    URI.prototype.clone = function() {
      return URI(this.toObject());
    };

    URI.prototype.toObject = function() {
      return {
        scheme: this.getScheme(),
        authority: this.getAuthority(),
        path: this.getPath(),
        query: this.getQuery(),
        fragment: this.getFragment()
      };
    };

    URI.prototype.toString = function() {
      var query_string, result;
      result = '';
      if (this.scheme) {
        result += this.scheme + ':';
      }
      if (this.authority) {
        result += '//' + URI.encode(this.authority, ':@[]');
      }
      if (this.path) {
        assert(!this.authority || !this.path.length || this.path[0] === '/', 'Path must start with a "/" if URI is not relative');
        result += URI.encode(this.path, '/');
      }
      query_string = this._query.toString();
      if (query_string) {
        result += '?' + query_string;
      }
      if (this.fragment) {
        result += '#' + URI.encode(this.fragment, ':@[]/&=+?#!');
      }
      return result;
    };

    URI.REGEXP = /^(?:([^:/\\?#]+):)?(?:[/\\]{2}([^/\\?#]*))?([^?#]*)(?:\?([^#]*))?(?:[#](.*))?$/;

    URI.SCHEME_REGEXP = /^[a-zA-Z][a-zA-Z0-9+.\-]*$/;

    URI.decode = function(value) {
      if (!value) {
        return '';
      }
      return decodeURIComponent(value);
    };

    URI.encode = function(value, safe) {
      var escaped, safe_char, _i, _len;
      if (safe == null) {
        safe = '';
      }
      if (!value) {
        return '';
      }
      value = encodeURIComponent(value);
      safe += '~';
      for (_i = 0, _len = safe.length; _i < _len; _i++) {
        safe_char = safe[_i];
        escaped = encodeURIComponent(safe_char);
        value = value.replace(new RegExp(escaped, 'g'), safe_char);
      }
      return value;
    };

    return URI;

  })();
  QueryComponent = (function() {
    function QueryComponent(params) {
      this.dict = {};
      this.add(params);
    }

    QueryComponent.parse_string = function(query_string) {
      var k, param, param_dict, params, parts, v, _i, _len;
      if (!query_string) {
        return null;
      }
      param_dict = {};
      params = query_string.split('&');
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        if (param !== '') {
          parts = param.split('=');
          k = QueryComponent.decode(parts[0]);
          v = QueryComponent.decode(parts.slice(1).join('='));
          if (k in param_dict) {
            if (!Array.isArray(param_dict[k])) {
              param_dict[k] = [param_dict[k]];
            }
            param_dict[k].push(v);
          } else {
            param_dict[k] = v;
          }
        }
      }
      return param_dict;
    };

    QueryComponent.prototype.add = function(first, second) {
      var elm, k, params, v;
      if (second == null) {
        second = null;
      }
      if (typeof first === 'string') {
        if (second != null) {
          if (Array.isArray(second)) {
            this.dict[first] = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = second.length; _i < _len; _i++) {
                elm = second[_i];
                _results.push(String(elm));
              }
              return _results;
            })();
          } else {
            this.dict[first] = String(second);
          }
        }
      } else {
        params = first || {};
        for (k in params) {
          v = params[k];
          if (v != null) {
            if (Array.isArray(v)) {
              this.dict[k] = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = v.length; _i < _len; _i++) {
                  elm = v[_i];
                  _results.push(String(elm));
                }
                return _results;
              })();
            } else {
              this.dict[k] = String(v);
            }
          }
        }
      }
      return this;
    };

    QueryComponent.prototype.replace = function(query) {
      this.dict = query || {};
      return this;
    };

    QueryComponent.prototype.toString = function() {
      var k, result, v, _ref;
      result = [];
      _ref = this.dict;
      for (k in _ref) {
        v = _ref[k];
        if (Array.isArray(v)) {
          v.forEach(function(v_elm) {
            return result.push(QueryComponent.encode(k) + '=' + QueryComponent.encode(v_elm));
          });
        } else {
          result.push(QueryComponent.encode(k) + '=' + QueryComponent.encode(v));
        }
      }
      if (!result.length) {
        return '';
      }
      return result.join('&');
    };

    QueryComponent.decode = function(value) {
      if (value === null) {
        return '';
      }
      return URI.decode(value.replace(/\+/g, '%20'));
    };

    QueryComponent.encode = function(value) {
      if (value === null) {
        return '';
      }
      return URI.encode(value).replace(/%20/g, '+');
    };

    return QueryComponent;

  })();
  window.URI = URI;
  return URI;
});

//# sourceMappingURL=uri.map
;
// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define('modules/core/browser',['modules/core/exception', 'modules/core/uri'], function(_arg, URI) {
  var Browser, assert, browser_info, domainWhitelist, extract_browser_info_from_user_agent;
  assert = _arg.assert;
  extract_browser_info_from_user_agent = function(ua) {
    var match;
    ua = ua.toLowerCase();
    match = /(ipad)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || /(trident).*? rv:([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
    return {
      browser: match[1] || "",
      version: match[2] || "0"
    };
  };
  browser_info = extract_browser_info_from_user_agent(navigator.userAgent);
  if (browser_info.browser === 'trident') {
    browser_info.browser = 'msie';
  }
  domainWhitelist = typeof Constants !== "undefined" && Constants !== null ? [Constants.WEBSERVER, Constants.BLOCK_CLUSTER] : [];
  Browser = {
    version: browser_info.version,
    msie_version_at_most: function(v) {
      return Browser.msie && parseInt(Browser.version, 10) <= v;
    },
    get_uri: function(target_window) {
      if (target_window == null) {
        target_window = window;
      }
      return URI.parse(this.get_href(target_window));
    },
    get_href: function(target_window) {
      if (target_window == null) {
        target_window = window;
      }
      return target_window.location.href;
    },
    _parse_target: function(target_href, target_window) {
      var hostname, parsedTarget, parser, pathname, protocol, _ref;
      if (target_window == null) {
        target_window = window;
      }
      parser = target_window.document.createElement('a');
      parser.href = target_href;
      if (parser.protocol === ":") {
        protocol = target_window.location.protocol;
      } else {
        protocol = parser.protocol || target_window.location.protocol;
      }
      hostname = parser.hostname || target_window.location.hostname;
      pathname = parser.pathname.indexOf('/') === 0 ? parser.pathname : '/' + parser.pathname;
      target_href = protocol + "//" + hostname + pathname + parser.search + parser.hash;
      parsedTarget = URI.parse(String(target_href));
      assert((_ref = parsedTarget.authority, __indexOf.call(domainWhitelist, _ref) >= 0) && parsedTarget.scheme === 'https', "Target URI must be secure and in domain whitelist");
      return parsedTarget;
    },
    redirect: function(target_href, target_window) {
      var parsedTarget;
      if (target_window == null) {
        target_window = window;
      }
      parsedTarget = this._parse_target(target_href, target_window);
      return target_window.location.href = parsedTarget.toString();
    },
    replace_location: function(target_href) {
      var parsedTarget;
      parsedTarget = this._parse_target(target_href);
      return window.location.replace(parsedTarget.toString());
    },
    reload: function() {
      return window.location.reload();
    },
    unsafeRedirect: function(target_href) {
      return window.location.href = target_href;
    }
  };
  Browser[browser_info.browser] = true;
  if (Browser.ipad) {
    Browser.webkit = true;
    Browser.safari = true;
  } else if (Browser.chrome) {
    Browser.webkit = true;
  } else if (Browser.webkit) {
    Browser.safari = true;
  }
  window.Browser = Browser;
  return Browser;
});

//# sourceMappingURL=browser.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/instantiate',['modules/core/exception'], function(_arg) {
  var assert, construct, instantiate;
  assert = _arg.assert;
  construct = function(constructor, args) {
    var F;
    assert(constructor);
    F = function() {
      return constructor.apply(this, args);
    };
    F.prototype = constructor.prototype;
    return new F();
  };
  instantiate = {
    construct: construct
  };
  return instantiate;
});

//# sourceMappingURL=instantiate.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/controller_registry',['jquery', 'modules/core/exception', 'modules/core/instantiate'], function($j, _arg, _arg1) {
  var ControllerRegistry, assert, attach_controller, construct;
  assert = _arg.assert;
  construct = _arg1.construct;
  attach_controller = function($element, constructor, args) {
    var constructor_args, elt, _i, _len;
    constructor_args = [$element].concat(args);
    for (_i = 0, _len = $element.length; _i < _len; _i++) {
      elt = $element[_i];
      $j(elt).data('jscontroller', construct(constructor, constructor_args));
    }
    return $element;
  };
  ControllerRegistry = (function() {
    function ControllerRegistry() {}

    ControllerRegistry.controllers = {};

    ControllerRegistry.register_controller = function(pyxl_id, constructor, args) {
      this.controllers[pyxl_id] = {
        constructor: constructor,
        args: args
      };
      return this.find_and_bind_controller(pyxl_id);
    };

    ControllerRegistry.bind_controller = function($element) {
      var component_id, data;
      component_id = $element.data('js-component-id');
      assert(this.controllers[component_id], "No controller for " + component_id);
      data = this.controllers[component_id];
      return attach_controller($element, data.constructor, data.args);
    };

    ControllerRegistry.find_and_bind_controller = function(component_id) {
      var $element, data;
      assert(this.controllers[component_id], "No controller for " + component_id);
      data = this.controllers[component_id];
      $element = $j("[data-js-component-id='" + component_id + "']");
      return attach_controller($element, data.constructor, data.args);
    };

    return ControllerRegistry;

  })();
  return ControllerRegistry;
});

//# sourceMappingURL=controller_registry.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/cookies',[], function() {
  var Cookies;
  Cookies = {
    create: function(name, value, days) {
      var date, expires;
      expires = "";
      if (days) {
        date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + (date.toGMTString());
      }
      return document.cookie = "" + name + "=" + value + expires + "; path=/";
    },
    read: function(name) {
      var c, nameEQ, _i, _len, _ref;
      nameEQ = "" + name + "=";
      _ref = document.cookie.split(";");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        while (c.charAt(0) === " ") {
          c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) {
          return c.substring(nameEQ.length, c.length);
        }
      }
      return null;
    },
    "delete": function(name) {
      return this.create(name, "", -1);
    },
    are_enabled: function() {
      if (navigator.cookieEnabled != null) {
        return navigator.cookieEnabled;
      }
      document.cookie = "this_is_a_test_cookie";
      return document.cookie.indexOf("this_is_a_test_cookie") !== -1;
    }
  };
  window.Cookies = Cookies;
  return Cookies;
});

//# sourceMappingURL=cookies.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/dom',['jquery', 'modules/core/controller_registry', 'modules/core/exception'], function($j, ControllerRegistry, _arg) {
  var assert, bind_controllers, clone, clone_position, controller, document_height, dom, focus_in_input, is_element, scroll_clear_cache, scroll_lock_document, scroll_lock_document_count, scroll_offsets, scroll_to, scroll_unlock_document, set_controller, viewport_dimensions, viewport_offset, _cached_scroll_offsets, _cached_viewport_dimensions, _is_page_scrollable, _resize_listener, _scroll_listener;
  assert = _arg.assert;
  bind_controllers = function($element) {
    var child, _i, _len, _ref;
    _ref = $element.children();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      bind_controllers($j(child));
    }
    if (!controller($element) && $element.data('js-component-id')) {
      return ControllerRegistry.bind_controller($element);
    }
  };
  clone = function($element) {
    var $cloned;
    assert($element, "Trying to clone nonexistent element");
    $cloned = $element.clone();
    bind_controllers($cloned);
    return $cloned;
  };
  controller = function($element) {
    return $element.data('jscontroller');
  };
  set_controller = function($element, controller_object) {
    return $element.data('jscontroller', controller_object);
  };
  is_element = function(element) {
    if (!element) {
      return false;
    } else if (element.nodeType === 1) {
      return true;
    } else if (element.length >= 1 && element[0].nodeType === 1) {
      return true;
    } else {
      return false;
    }
  };
  focus_in_input = function() {
    var _ref, _ref1, _ref2, _ref3, _ref4;
    return (((_ref = (_ref1 = document.activeElement) != null ? _ref1.tagName : void 0) === "INPUT" || _ref === "TEXTAREA" || _ref === "SELECT") && ((_ref2 = (_ref3 = document.activeElement) != null ? _ref3.type : void 0) !== "submit" && _ref2 !== "button")) || ((_ref4 = document.activeElement) != null ? _ref4.getAttribute("contentEditable") : void 0);
  };
  viewport_offset = function(element) {
    var $element, $window_element, offset;
    $element = $j(element);
    offset = $element.offset();
    $window_element = $j(window);
    return {
      left: offset.left - $window_element.scrollLeft(),
      top: offset.top - $window_element.scrollTop()
    };
  };
  _cached_viewport_dimensions = null;
  _resize_listener = null;
  viewport_dimensions = function() {
    if (!_cached_viewport_dimensions) {
      _cached_viewport_dimensions = {
        height: $j(window).height(),
        width: $j(window).width()
      };
    }
    if (!_resize_listener) {
      _resize_listener = $j(window).on('resize', function() {
        return _cached_viewport_dimensions = null;
      });
    }
    return _cached_viewport_dimensions;
  };
  document_height = function() {
    return Math.max($j(document).height(), $j(window).height(), document.documentElement.clientHeight);
  };
  _scroll_listener = null;
  _cached_scroll_offsets = null;
  scroll_offsets = function() {
    var $html, scroll_left, scroll_top;
    if (!_scroll_listener) {
      _scroll_listener = $j(window).scroll(function() {
        return _cached_scroll_offsets = null;
      });
    }
    if (_is_page_scrollable()) {
      if (!_cached_scroll_offsets) {
        scroll_top = $j(window).scrollTop();
        scroll_left = $j(window).scrollLeft();
        _cached_scroll_offsets = {
          0: scroll_left,
          1: scroll_top,
          left: scroll_left,
          top: scroll_top
        };
      }
    } else {
      $html = $j(document.documentElement);
      scroll_top = -1 * parseInt($html.css('top'), 10);
      scroll_left = -1 * parseInt($html.css('left'), 10);
      _cached_scroll_offsets = {
        0: scroll_left,
        1: scroll_top,
        left: scroll_left,
        top: scroll_top
      };
    }
    return _cached_scroll_offsets;
  };
  scroll_clear_cache = function() {
    return _cached_scroll_offsets = null;
  };
  _is_page_scrollable = function() {
    return !$j(document.documentElement).hasClass('no-scroll');
  };
  scroll_lock_document_count = 0;
  scroll_lock_document = function() {
    var $html, left, top, _scroll_offsets;
    scroll_lock_document_count++;
    $html = $j(document.documentElement);
    if (!$html.hasClass('no-scroll')) {
      _scroll_offsets = scroll_offsets();
      top = (-1 * _scroll_offsets['top']) + 'px';
      left = (-1 * _scroll_offsets['left']) + 'px';
      $html.css({
        top: top,
        left: left
      });
      return $html.addClass('no-scroll');
    }
  };
  scroll_unlock_document = function() {
    var $html, scroll_left, scroll_top;
    if (scroll_lock_document_count > 0) {
      scroll_lock_document_count--;
    }
    $html = $j(document.documentElement);
    if (scroll_lock_document_count === 0 && $html.hasClass('no-scroll')) {
      scroll_top = -1 * parseInt($html.css('top'), 10);
      scroll_left = -1 * parseInt($html.css('left'), 10);
      $html.css({
        top: '',
        left: ''
      });
      $html.removeClass('no-scroll');
      scroll_to(scroll_left, scroll_top + 1);
      scroll_to(scroll_left, scroll_top - 1);
      return scroll_to(scroll_left, scroll_top);
    }
  };
  scroll_to = function(x, y) {
    x = Math.max(x, 0);
    y = Math.max(y, 0);
    if (y > scroll_offsets().top) {
      y = Math.min(y, document_height() - dom.viewport_dimensions().height);
    }
    window.scrollTo(x, y);
    return _cached_scroll_offsets = {
      0: x,
      1: y,
      left: x,
      top: y
    };
  };
  clone_position = function(target, source, options) {
    var $parent, $source, $target, a, b, defaults, delta, source_position;
    $source = $j(source);
    $target = $j(target);
    defaults = {
      setLeft: true,
      setTop: true,
      setWidth: true,
      setHeight: true,
      offsetTop: 0,
      offsetLeft: 0
    };
    options = $j.extend({}, defaults, options);
    source_position = viewport_offset($source);
    delta = {
      top: 0,
      left: 0
    };
    $parent = null;
    if ($target.css('position') === 'absolute') {
      $parent = $target.offsetParent();
      delta = viewport_offset($parent);
    }
    if ($parent && $parent[0] === document.body) {
      delta.left -= document.body.offsetLeft;
      delta.top -= document.body.offsetTop;
    }
    if (options.setLeft) {
      a = (source_position.left - delta.left + options.offsetLeft) + 'px';
      $target.css('left', a);
    }
    if (options.setTop) {
      b = (source_position.top - delta.top + options.offsetTop) + 'px';
      $target.css('top', b);
    }
    if (options.setWidth) {
      $target.width($source[0].offsetWidth);
    }
    if (options.setHeight) {
      $target.height($source[0].offsetHeight);
    }
    return $target;
  };
  viewport_offset = function(element) {
    var $element, $window_element, offset;
    $element = $j(element);
    offset = $element.offset();
    $window_element = $j(window);
    return {
      left: offset.left - $window_element.scrollLeft(),
      top: offset.top - $window_element.scrollTop()
    };
  };
  dom = {
    bind_controllers: bind_controllers,
    clone: clone,
    clone_position: clone_position,
    controller: controller,
    focus_in_input: focus_in_input,
    scroll_clear_cache: scroll_clear_cache,
    scroll_lock_document: scroll_lock_document,
    scroll_offsets: scroll_offsets,
    scroll_to: scroll_to,
    scroll_unlock_document: scroll_unlock_document,
    set_controller: set_controller,
    is_element: is_element,
    viewport_offset: viewport_offset,
    viewport_dimensions: viewport_dimensions
  };
  window.dom = dom;
  return dom;
});

//# sourceMappingURL=dom.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/html',[], function() {
  var HTML;
  HTML = (function() {
    function HTML(str) {
      this._str_DONT_TOUCH = str;
    }

    HTML.prototype.toHTML = function() {
      return this._str_DONT_TOUCH;
    };

    HTML.prototype.toString = function() {
      return "[object HTML]";
    };

    return HTML;

  })();
  (function() {
    var disallowed_char_regex, escape, escaper, _raw_escape;
    HTML.tmpl = function(str, data) {
      var fn;
      if (!/[^\w:.-]/.test(str)) {
        str = document.getElementById(str).innerHTML;
      }
      fn = new Function("obj", "var p=[],print=function(){p.push.apply(p,arguments);};" + "with(obj){p.push('" + str.replace(/[\r\t\n]/g, " ").replace(/'(?=[^%]*%>)/g, "\t").split("'").join("\\'").split("\t").join("'").replace(/<%=(.*?)%>/g, "',HTML._raw_escape($1),'").split("<%").join("');").split("%>").join("p.push('") + "');}return new HTML(jQuery.trim(p.join('')));");
      if (data) {
        return fn(data);
      } else {
        return fn;
      }
    };
    disallowed_char_regex = /[^\w@\.\ \-\(\)\,\$~%#\[\]\{\}\!\^]/g;
    escaper = function(s) {
      return "&#" + s.charCodeAt(0) + ";";
    };
    escape = function(str) {
      return ("" + str).replace(disallowed_char_regex, escaper);
    };
    HTML.escape = function(str) {
      if (str instanceof HTML) {
        return str;
      } else {
        return new HTML(escape(str));
      }
    };
    return HTML._raw_escape = _raw_escape = function(str) {
      if (str instanceof HTML) {
        return str.toHTML();
      } else if (typeof str === "number") {
        return str;
      } else {
        return escape(str);
      }
    };
  })();
  window.HTML = HTML;
  return HTML;
});

//# sourceMappingURL=html.map
;
// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

define('modules/core/kwargs',[], function() {
  var PyKeywordArguments;
  PyKeywordArguments = function() {
    var args, haveKwargDict, i, key, returned, signature, tuple, value, _i, _ref, _ref1;
    signature = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    returned = {};
    signature = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = signature.length; _i < _len; _i++) {
        tuple = signature[_i];
        _results.push(typeof tuple === 'string' ? {
          'name': tuple,
          'default': void 0
        } : {
          'name': tuple[0],
          'default': tuple[1]
        });
      }
      return _results;
    })();
    haveKwargDict = function() {
      var i, key, signature_fields, value, _i, _ref, _ref1, _ref2;
      if (!((args != null) && typeof args[args.length - 1] === 'object')) {
        return false;
      }
      signature_fields = {};
      for (i = _i = _ref = args.length - 1, _ref1 = signature.length - 1; _i <= _ref1; i = _i += 1) {
        signature_fields[signature[i].name] = true;
      }
      _ref2 = args[args.length - 1];
      for (key in _ref2) {
        value = _ref2[key];
        if (!(key in signature_fields)) {
          return false;
        }
      }
      return true;
    };
    if (haveKwargDict()) {
      _ref = args[args.length - 1];
      for (key in _ref) {
        value = _ref[key];
        returned[key] = value;
      }
      args.pop();
    }
    for (i = _i = 0, _ref1 = signature.length - 1; _i <= _ref1; i = _i += 1) {
      if (i < args.length) {
        returned[signature[i].name] = args[i];
      } else {
        if (!(signature[i].name in returned)) {
          returned[signature[i].name] = signature[i]["default"];
        }
      }
    }
    return returned;
  };
  return PyKeywordArguments;
});

//# sourceMappingURL=kwargs.map
;
(function() {/*
 A JavaScript implementation of the SHA family of hashes, as defined in FIPS
 PUB 180-2 as well as the corresponding HMAC implementation as defined in
 FIPS PUB 198a

 Copyright Brian Turek 2008-2012
 Distributed under the BSD License
 See http://caligatio.github.com/jsSHA/ for more information

 Several functions taken from Paul Johnson
*/
function k(a){throw a;}function s(a,e){var b=[],f=(1<<e)-1,c=a.length*e,d;for(d=0;d<c;d+=e)b[d>>>5]|=(a.charCodeAt(d/e)&f)<<32-e-d%32;return{value:b,binLen:c}}function u(a){var e=[],b=a.length,f,c;0!==b%2&&k("String of HEX type must be in byte increments");for(f=0;f<b;f+=2)c=parseInt(a.substr(f,2),16),isNaN(c)&&k("String of HEX type contains invalid characters"),e[f>>>3]|=c<<24-4*(f%8);return{value:e,binLen:4*b}}
function v(a){var e=[],b=0,f,c,d,g,h;-1===a.search(/^[a-zA-Z0-9=+\/]+$/)&&k("Invalid character in base-64 string");f=a.indexOf("=");a=a.replace(/\=/g,"");-1!==f&&f<a.length&&k("Invalid '=' found in base-64 string");for(c=0;c<a.length;c+=4){h=a.substr(c,4);for(d=g=0;d<h.length;d+=1)f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(h[d]),g|=f<<18-6*d;for(d=0;d<h.length-1;d+=1)e[b>>2]|=(g>>>16-8*d&255)<<24-8*(b%4),b+=1}return{value:e,binLen:8*b}}
function w(a,e){var b="",f=4*a.length,c,d;for(c=0;c<f;c+=1)d=a[c>>>2]>>>8*(3-c%4),b+="0123456789abcdef".charAt(d>>>4&15)+"0123456789abcdef".charAt(d&15);return e.outputUpper?b.toUpperCase():b}
function x(a,e){var b="",f=4*a.length,c,d,g;for(c=0;c<f;c+=3){g=(a[c>>>2]>>>8*(3-c%4)&255)<<16|(a[c+1>>>2]>>>8*(3-(c+1)%4)&255)<<8|a[c+2>>>2]>>>8*(3-(c+2)%4)&255;for(d=0;4>d;d+=1)b=8*c+6*d<=32*a.length?b+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(g>>>6*(3-d)&63):b+e.b64Pad}return b}
function y(a){var e={outputUpper:!1,b64Pad:"="};try{a.hasOwnProperty("outputUpper")&&(e.outputUpper=a.outputUpper),a.hasOwnProperty("b64Pad")&&(e.b64Pad=a.b64Pad)}catch(b){}"boolean"!==typeof e.outputUpper&&k("Invalid outputUpper formatting option");"string"!==typeof e.b64Pad&&k("Invalid b64Pad formatting option");return e}function z(a,e){var b=(a&65535)+(e&65535);return((a>>>16)+(e>>>16)+(b>>>16)&65535)<<16|b&65535}
function A(a,e,b,f,c){var d=(a&65535)+(e&65535)+(b&65535)+(f&65535)+(c&65535);return((a>>>16)+(e>>>16)+(b>>>16)+(f>>>16)+(c>>>16)+(d>>>16)&65535)<<16|d&65535}
function B(a,e){var b=[],f,c,d,g,h,C,t,j,D,l=[1732584193,4023233417,2562383102,271733878,3285377520],n=[1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1518500249,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,1859775393,
1859775393,1859775393,1859775393,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,2400959708,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782,3395469782];a[e>>>5]|=128<<24-e%32;a[(e+
65>>>9<<4)+15]=e;D=a.length;for(t=0;t<D;t+=16){f=l[0];c=l[1];d=l[2];g=l[3];h=l[4];for(j=0;80>j;j+=1)b[j]=16>j?a[j+t]:(b[j-3]^b[j-8]^b[j-14]^b[j-16])<<1|(b[j-3]^b[j-8]^b[j-14]^b[j-16])>>>31,C=20>j?A(f<<5|f>>>27,c&d^~c&g,h,n[j],b[j]):40>j?A(f<<5|f>>>27,c^d^g,h,n[j],b[j]):60>j?A(f<<5|f>>>27,c&d^c&g^d&g,h,n[j],b[j]):A(f<<5|f>>>27,c^d^g,h,n[j],b[j]),h=g,g=d,d=c<<30|c>>>2,c=f,f=C;l[0]=z(f,l[0]);l[1]=z(c,l[1]);l[2]=z(d,l[2]);l[3]=z(g,l[3]);l[4]=z(h,l[4])}return l}
window.jsSHA=function(a,e,b){var f=null,c=0,d=[0],g=0,h=null,g="undefined"!==typeof b?b:8;8===g||16===g||k("charSize must be 8 or 16");"HEX"===e?(0!==a.length%2&&k("srcString of HEX type must be in byte increments"),h=u(a),c=h.binLen,d=h.value):"ASCII"===e||"TEXT"===e?(h=s(a,g),c=h.binLen,d=h.value):"B64"===e?(h=v(a),c=h.binLen,d=h.value):k("inputFormat must be HEX, TEXT, ASCII, or B64");this.getHash=function(b,a,e){var g=null,h=d.slice(),n="";switch(a){case "HEX":g=w;break;case "B64":g=x;break;default:k("format must be HEX or B64")}"SHA-1"===
b?(null===f&&(f=B(h,c)),n=g(f,y(e))):k("Chosen SHA variant is not supported");return n};this.getHMAC=function(b,a,e,f,h){var n,p,m,E,r,F,G=[],H=[],q=null;switch(f){case "HEX":n=w;break;case "B64":n=x;break;default:k("outputFormat must be HEX or B64")}"SHA-1"===e?(m=64,F=160):k("Chosen SHA variant is not supported");"HEX"===a?(q=u(b),r=q.binLen,p=q.value):"ASCII"===a||"TEXT"===a?(q=s(b,g),r=q.binLen,p=q.value):"B64"===a?(q=v(b),r=q.binLen,p=q.value):k("inputFormat must be HEX, TEXT, ASCII, or B64");
b=8*m;a=m/4-1;m<r/8?("SHA-1"===e?p=B(p,r):k("Unexpected error in HMAC implementation"),p[a]&=4294967040):m>r/8&&(p[a]&=4294967040);for(m=0;m<=a;m+=1)G[m]=p[m]^909522486,H[m]=p[m]^1549556828;"SHA-1"===e?E=B(H.concat(B(G.concat(d),b+c)),b+F):k("Unexpected error in HMAC implementation");return n(E,y(h))}};})();

define("external/sha1", function(){});

// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

define('modules/core/i18n',['modules/core/kwargs', 'modules/core/exception', 'external/sha1'], function(PyKeywordArguments, _arg, jssha) {
  var ACCENT_MAP, I18n, I18nProjects, LOWER, LOWER_ACCENT, NoOpTranslated, STUB_BIND, STUB_IS_ARRAY, UPPER, UPPER_ACCENT, assert, i, _i;
  assert = _arg.assert;
  LOWER = 'abcdefghijklmnopqrstuvwxyz';
  LOWER_ACCENT = '\xe2\u1e03\u0107\u1e0b\xe8\u1e1f\u011d\u1e2b\xed\u0135\u01e9' + '\u013a\u1e41\u0144\u014f\u1e57\u024b\u0155\u015b\u1e6d\u016f' + '\u1e7f\u1e98\u1e8b\u1e8f\u1e93';
  UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  UPPER_ACCENT = '\u1e00\u1e02\u1e08\u1e0a\u1e14\u1e1e\u1e20\u1e22\u1e2c\u0134' + '\u1e34\u013b\u1e3e\u014a\xd5\u1e54\u024a\u0154\u1e60\u1e6e\u0168' + '\u1e7c\u1e84\u1e8c\u0178\u01b5';
  ACCENT_MAP = {};
  for (i = _i = 0; _i < 26; i = ++_i) {
    ACCENT_MAP[LOWER.charAt(i)] = LOWER_ACCENT.charAt(i);
    ACCENT_MAP[UPPER.charAt(i)] = UPPER_ACCENT.charAt(i);
  }
  I18n = (function() {
    function I18n() {}

    I18n.messages = {};

    I18n.emessages = {};

    I18n.RAND = 0;

    I18n.NUM_MISSED = 0;

    I18n.add_i18n_message = function(id, msg_display, english_display, clear_msg) {
      msg_display = msg_display.strip_tags().friendly_format();
      english_display = english_display.strip_tags();
      this.messages[msg_display] = id;
      this.emessages[msg_display] = english_display;
      if (clear_msg) {
        delete this.messages[clear_msg];
        return delete this.emessages[clear_msg];
      }
    };

    I18n.PLURAL_RULES = {
      SINGULAR_1: function(n) {
        if (n === 1) {
          return 0;
        } else {
          return 1;
        }
      },
      SINGULAR_01: function(n) {
        if (n <= 1) {
          return 0;
        } else {
          return 1;
        }
      },
      SINGULAR_ALL: function(n) {
        return 0;
      },
      RUSSIA_UKRAINE: function(n) {
        if (n % 10 === 1 && n % 100 !== 11) {
          return 0;
        } else if (n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20)) {
          return 1;
        } else {
          return 2;
        }
      },
      POLAND: function(n) {
        if (n === 1) {
          return 0;
        } else if (n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20)) {
          return 1;
        } else {
          return 2;
        }
      }
    };

    I18n.PLURAL_RULES_BY_LOCALE = {
      en: I18n.PLURAL_RULES.SINGULAR_1,
      en_GB: I18n.PLURAL_RULES.SINGULAR_1,
      da_DK: I18n.PLURAL_RULES.SINGULAR_1,
      de: I18n.PLURAL_RULES.SINGULAR_1,
      es_ES: I18n.PLURAL_RULES.SINGULAR_1,
      es: I18n.PLURAL_RULES.SINGULAR_1,
      fr: I18n.PLURAL_RULES.SINGULAR_01,
      id: I18n.PLURAL_RULES.SINGULAR_ALL,
      it: I18n.PLURAL_RULES.SINGULAR_1,
      ja: I18n.PLURAL_RULES.SINGULAR_ALL,
      ko: I18n.PLURAL_RULES.SINGULAR_ALL,
      ms: I18n.PLURAL_RULES.SINGULAR_ALL,
      nb_NO: I18n.PLURAL_RULES.SINGULAR_1,
      nl_NL: I18n.PLURAL_RULES.SINGULAR_1,
      pl: I18n.PLURAL_RULES.POLAND,
      pt_BR: I18n.PLURAL_RULES.SINGULAR_01,
      ru: I18n.PLURAL_RULES.RUSSIA_UKRAINE,
      sv_SE: I18n.PLURAL_RULES.SINGULAR_1,
      th_TH: I18n.PLURAL_RULES.SINGULAR_ALL,
      tr: I18n.PLURAL_RULES.SINGULAR_ALL,
      uk_UA: I18n.PLURAL_RULES.RUSSIA_UKRAINE,
      xx_AC: I18n.PLURAL_RULES.SINGULAR_1,
      xx_LS: I18n.PLURAL_RULES.SINGULAR_1,
      xx_HA: I18n.PLURAL_RULES.SINGULAR_1,
      xx_RL: I18n.PLURAL_RULES.SINGULAR_1,
      xx_AE: I18n.PLURAL_RULES.SINGULAR_1,
      zh_CN: I18n.PLURAL_RULES.SINGULAR_ALL,
      zh_TW: I18n.PLURAL_RULES.SINGULAR_ALL
    };

    I18n.get_langpack = function() {
      if (!window.LANGPACK) {
        window.LANGPACK = {};
      }
      return window.LANGPACK;
    };

    I18n._ = function() {
      var args, comment, langpack, lookup, project, r, s, string_key, _ref;
      s = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = PyKeywordArguments.apply(null, [[['project', 'web'], 'comment']].concat(__slice.call(args))), project = _ref.project, comment = _ref.comment;
      if ((typeof Constants !== "undefined" && Constants !== null ? Constants.USER_LOCALE : void 0) && I18n.locale_is_fake(Constants.USER_LOCALE)) {
        r = I18n.fake_translate(s, typeof Constants !== "undefined" && Constants !== null ? Constants.USER_LOCALE : void 0);
      } else {
        string_key = I18nProjects.get_string_key(s, project, comment);
        langpack = I18n.get_langpack();
        lookup = langpack[string_key] || langpack[s];
        if (lookup) {
          if (lookup instanceof String || typeof lookup === "string") {
            r = lookup;
          } else {
            r = lookup[0] || s;
          }
        } else {
          if (I18n.RAND === 0 && (typeof Constants !== "undefined" && Constants !== null) && Constants.USER_LOCALE !== 'en') {
            I18n.RAND = Math.floor((Math.random() * 20) + 1);
          }
          if (I18n.RAND === 1 && I18n.NUM_MISSED < 4) {
            I18n.NUM_MISSED += 1;

            /*global: jQuery override static analyzer warning */
            if (typeof jQuery !== "undefined" && jQuery !== null) {
              jQuery.ajax({
                url: "/missed_translation_log",
                type: "POST",
                data: {
                  message: s,
                  comment: comment,
                  project: project
                }
              });
            }
          }
          r = s;
        }
      }
      I18n.add_i18n_message(s, r, s);
      return r;
    };

    I18n.fake_translate = function(str, locale) {
      var alpha_num, c, hebrew_alphabet_start, lowercase_latin_alphabet_start, out_str, _j, _ref;
      if (locale === "xx_LS") {
        str = str + "SSSSSSSSSSSSSSSSSSSSSSSSS";
      }
      if (locale === "xx_AC" && !/</.test(str)) {
        str = str.toUpperCase();
      }
      if (locale === "xx_HA") {
        str = "[javascript]" + str;
      }
      if (locale === "xx_RL" && !/</.test(str) && !/%/.test(str)) {
        lowercase_latin_alphabet_start = 97;
        hebrew_alphabet_start = 1488;
        out_str = "";
        str = str.toLowerCase();
        for (i = _j = 0, _ref = str.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          alpha_num = str.charCodeAt(i) - lowercase_latin_alphabet_start;
          if ((0 <= alpha_num && alpha_num < 26)) {
            out_str += String.fromCharCode(hebrew_alphabet_start + alpha_num);
          } else {
            out_str += str[i];
          }
        }
        str = out_str;
      }
      if (locale === "xx_AE" && !/</.test(str) && !/%/.test(str)) {
        str = ((function() {
          var _k, _ref1, _ref2, _results;
          _results = [];
          for (i = _k = 0, _ref1 = str.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
            c = str.charAt(i);
            _results.push((_ref2 = ACCENT_MAP[c]) != null ? _ref2 : c);
          }
          return _results;
        })()).join('');
      }
      return str;
    };

    I18n.locale_is_fake = function(locale) {
      return locale.indexOf("xx_") !== -1;
    };

    I18n.ungettext = function() {
      var args, comment, english_string, langpack, locale, lookup, n, plural, plural_class, project, ret, singular, string_key, _ref;
      singular = arguments[0], plural = arguments[1], n = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      _ref = PyKeywordArguments.apply(null, [[['project', 'web'], 'comment']].concat(__slice.call(args))), project = _ref.project, comment = _ref.comment;
      assert(n != null, 'missing number parameter for ungettext');
      locale = typeof Constants !== "undefined" && Constants !== null ? Constants.USER_LOCALE : void 0;
      if (locale) {
        if (I18n.locale_is_fake(locale)) {
          singular = I18n.fake_translate(singular, locale);
          plural = I18n.fake_translate(plural, locale);
        } else {
          string_key = I18nProjects.get_string_key(singular, project, comment);
          langpack = I18n.get_langpack();
          lookup = langpack[string_key] || langpack[singular];
          if (lookup) {
            if (lookup instanceof String || typeof lookup === "string") {
              return lookup;
            }
            plural_class = I18n.PLURAL_RULES_BY_LOCALE[locale](n);
            if (plural_class in lookup) {
              ret = lookup[plural_class];
            }
          }
        }
      }
      english_string = n === 1 ? singular : plural;
      if (ret == null) {
        ret = english_string;
      }
      I18n.add_i18n_message(singular, ret, english_string);
      return ret;
    };

    I18n.N_ = function() {
      var args, comment, project, s, _ref;
      s = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = PyKeywordArguments.apply(null, [[['project', 'web'], 'comment']].concat(__slice.call(args))), project = _ref.project, comment = _ref.comment;
      return new NoOpTranslated(s, project, comment);
    };

    I18n.E_ = function(s) {
      return I18n._(s.msg, s.project, s.comment);
    };

    I18n.render_sentences = function(sentence_list) {
      var length, s, sentence, which, _j, _len;
      length = sentence_list.length;
      if (length === 1) {
        return sentence_list[0];
      } else if (length === 2) {
        return I18n._("%s %s", {
          comment: "Two sentences"
        }).format(sentence_list);
      } else if (length === 3) {
        return I18n._("%s %s %s", {
          comment: "Three sentences"
        }).format(sentence_list);
      } else if (length === 4) {
        return I18n._("%s %s %s %s", {
          comment: "Four sentences"
        }).format(sentence_list);
      } else {
        s = '';
        which = 0;
        for (_j = 0, _len = sentence_list.length; _j < _len; _j++) {
          sentence = sentence_list[_j];
          s += sentence;
          if (which !== (length - 1)) {
            s += I18n._(" ", {
              comment: "Sentence separator character"
            });
          }
          which += 1;
        }
        return s;
      }
    };

    I18n.i18n_default_project = function(project) {
      return {
        _: function() {
          var args, comment, s, _ref;
          s = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          _ref = PyKeywordArguments.apply(null, [[['project', project], 'comment']].concat(__slice.call(args))), project = _ref.project, comment = _ref.comment;
          return I18n._(s, project, comment);
        },
        ungettext: function() {
          var args, comment, n, plural, singular, _ref;
          singular = arguments[0], plural = arguments[1], n = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
          _ref = PyKeywordArguments.apply(null, [[['project', project], 'comment']].concat(__slice.call(args))), project = _ref.project, comment = _ref.comment;
          return I18n.ungettext(singular, plural, n, project, comment);
        },
        N_: function() {
          var args, comment, s, _ref;
          s = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          _ref = PyKeywordArguments.apply(null, [[['project', project], 'comment']].concat(__slice.call(args))), project = _ref.project, comment = _ref.comment;
          return I18n.N_(s, project, comment);
        },
        E_: I18n.E_
      };
    };

    return I18n;

  })();
  NoOpTranslated = (function() {
    function NoOpTranslated(msg, project, comment) {
      this.msg = msg;
      this.project = project;
      this.comment = comment;
    }

    return NoOpTranslated;

  })();
  I18nProjects = (function() {
    function I18nProjects() {}

    I18nProjects.get_message_context = function(project, comment) {
      var checksum, context, sha_obj;
      context = void 0;
      if (project !== "web") {
        context = "project:" + project;
      }
      if (comment != null) {
        sha_obj = new jsSHA(comment, "TEXT");
        checksum = sha_obj.getHash("SHA-1", "HEX");
        if (context != null) {
          context += ' ' + checksum;
        } else {
          context = checksum;
        }
      }
      return context;
    };

    I18nProjects.CONTEXT_DELIMITER = "\u0004";

    I18nProjects.get_string_key = function(string, project, comment) {
      var context;
      context = I18nProjects.get_message_context(project, comment);
      if (context != null) {
        return context + I18nProjects.CONTEXT_DELIMITER + string;
      } else {
        return string;
      }
    };

    return I18nProjects;

  })();
  STUB_IS_ARRAY = function(obj) {
    if (typeof Array.isArray === 'undefined') {
      return Object.prototype.toString.call(obj) === '[object Array]';
    }
    return Array.isArray(obj);
  };
  STUB_BIND = function() {
    var args, fn, obj;
    args = Array.prototype.slice.call(arguments);
    fn = args.shift();
    obj = args.shift();
    return function() {
      return fn.apply(obj, args.concat(Array.prototype.slice.call(arguments)));
    };
  };
  String.prototype.format_sub = function(sub_func) {
    return this.replace(/%(\([a-zA-Z0-9_\-]+\))?(.\d+)?(.)/g, STUB_BIND(sub_func, this));
  };
  String.prototype.format = function() {
    var curindex, d, eng, eng_msg_id, r, ret;
    if (arguments.length === 0) {
      return this.toString();
    }
    d = void 0;
    curindex = 0;
    if (arguments.length === 1 && arguments[0] instanceof Object) {
      d = arguments[0];
    } else {
      d = Array.prototype.slice.call(arguments, 0);
    }
    r = function(s, key, truncate, type) {
      var is_ac, parts, result, v;
      if (!key) {
        if (!STUB_IS_ARRAY(d)) {
          d = [d];
        }
        assert(curindex > -1, "Cannot mix named and positional indices in string formatting for string '" + this + "'.");
        assert(curindex < d.length, "Insufficient number of items in format for string '" + this + "'");
        v = d[curindex];
        curindex++;
      } else {
        key = key.slice(1, -1);
        assert(curindex <= 0, "Cannot mix named and positional indices in string formatting for string '" + this + "'.");
        curindex = -1;
        is_ac = (typeof Constants !== "undefined" && Constants !== null ? Constants.USER_LOCALE : void 0) === "xx_AC";
        assert(key in d || (is_ac && key.toLowerCase() in d), "Key '" + key + "' not present during string substitution for string '" + this + "'");
        v = d[key];
        if (is_ac) {
          v = d[key.toLowerCase()];
        }
      }
      assert(typeof v !== "undefined", "value for key '" + (key || "") + "' is undefined");
      result = void 0;
      if (type === "s" || type === "S") {
        result = v.toString();
      } else if (type === "d" || type === "D") {
        result = parseInt(v, 10).toString();
      } else if (type === "f" || type === "F") {
        result = Number(v).toString();
      } else if (type === "%") {
        return "%";
      } else {
        assert(false, "Unexpected format character '" + type + "' for string '" + this + "'.");
      }
      if (truncate) {
        truncate = parseInt(truncate.slice(1), 10);
        if (type === "f" || type === "F") {
          if (result.indexOf("." === -1)) {
            result = result + ".0";
          }
          parts = result.split(".");
          return parts[0] + "." + parts[1].slice(0, truncate);
        } else {
          return result.slice(0, truncate);
        }
      }
      return result;
    };
    ret = this.format_sub(r);
    if (I18n.messages && this in I18n.messages) {
      curindex = 0;
      eng_msg_id = I18n.emessages[this];
      eng = String.prototype.format_sub.call(eng_msg_id, r);
      I18n.add_i18n_message(eng_msg_id, ret, eng, this);
    }
    return ret;
  };
  String.prototype.friendly_format = function() {
    var numc, r, wordc;
    r = function(s, key, truncate, type) {
      if (!key) {
        if (type === "s" || type === "S") {
          return "[word" + (wordc++) + "]";
        } else {
          return "[number" + (numc++) + "]";
        }
      } else {
        return "[" + (key.slice(1, 1).replace('-', '_')) + "]";
      }
    };
    numc = 1;
    wordc = 1;
    return this.format_sub(r);
  };
  String.prototype.blank_format = function() {
    var r;
    r = function() {
      return "";
    };
    return this.format_sub(r);
  };
  String.prototype.strip_tags = function() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, "");
  };
  window.ungettext = I18n.ungettext;
  window._ = I18n._;
  window.N_ = I18n.N_;
  window.E_ = I18n.E_;
  window.render_sentences = I18n.render_sentences;
  return I18n;
});

//# sourceMappingURL=i18n.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/notify',['jquery', 'modules/core/i18n'], function($j, _arg) {
  var Notify, _;
  _ = _arg._;
  Notify = (function() {
    function Notify() {}

    Notify.DEFAULT_ERROR = _("There was a problem completing this request.");

    Notify.DEFAULT_SUCCESS = _('Your request completed successfully.');

    Notify.success = function(msg, duration) {
      if (duration == null) {
        duration = 10;
      }
      msg = msg || this.DEFAULT_SUCCESS;
      this._show(msg, duration, "server-success");
      return this.current();
    };

    Notify.error = function(msg, duration) {
      if (duration == null) {
        duration = 10;
      }
      msg = msg || this.DEFAULT_ERROR;
      this._show(msg, duration, "server-error");
      return this.current();
    };

    Notify.warning = function(msg, duration) {
      if (duration == null) {
        duration = 10;
      }
      this._show(msg, duration, "server-warning");
      return this.current();
    };

    Notify.info = function(msg, duration) {
      if (duration == null) {
        duration = 10;
      }
      this._show(msg, duration, "server-info");
      return this.current();
    };

    Notify.clear = function() {
      if (this._last_timeout) {
        clearTimeout(this._last_timeout);
      }
      if (this._last_animation) {
        this._last_animation.stop();
      }
      this._last_timeout = null;
      this._last_animation = null;
      return $j('#notify').removeClass("server-error server-info server-success server-warning").hide();
    };

    Notify.isShown = function() {
      return $j('#notify').is(':visible');
    };

    Notify.current = function() {
      return this._last_timeout;
    };

    Notify._show = function(msg, duration, klass) {
      this._buildElement();
      this.clear();
      this._setMessage(msg);
      this._showElement(klass);
      this._scheduleHide(duration);
      return this.current();
    };

    Notify._buildElement = function() {
      var notify_markup;
      if ($j('#notify').length) {
        return;
      }
      notify_markup = '<div id="notify-wrapper"> <span id="notify"> <span id="notify-msg" /> </span> </div>';
      return $j('body').append(notify_markup);
    };

    Notify._setMessage = function(msg) {
      var $msg_element;
      $msg_element = $j('#notify-msg');
      if (msg.toHTML != null) {
        return $msg_element.html(msg.toHTML());
      } else {
        if (msg instanceof $j) {
          return $msg_element.html(msg);
        } else {
          return $msg_element.text(msg);
        }
      }
    };

    Notify._showElement = function(klass) {
      var $notify;
      $notify = $j("#notify");
      $notify.addClass(klass);
      return this._last_animation = $notify.fadeIn(500);
    };

    Notify._scheduleHide = function(duration) {
      return this._last_timeout = setTimeout(this._hide, duration * 1000);
    };

    Notify._hide = function() {
      var $notify;
      $notify = $j("#notify");
      Notify._last_animation = $notify.fadeOut(1000);
      return Notify._last_timeout = null;
    };

    return Notify;

  })();
  window.Notify = Notify;
  return Notify;
});

//# sourceMappingURL=notify.map
;
// Generated by CoffeeScript 1.7.1
define('modules/core/ordered_dictionary',[], function() {
  var OrderedDictionary;
  OrderedDictionary = (function() {
    OrderedDictionary.list = [];

    OrderedDictionary.dict = {};

    function OrderedDictionary(list, dict) {
      this.list = list;
      this.dict = dict;
      return;
    }

    OrderedDictionary.prototype.push = function(key, value) {
      this.list.push(key);
      this.dict[key] = value;
    };

    OrderedDictionary.prototype.remove = function(key) {
      this.list.removeItem(key);
      delete this.dict[key];
    };

    OrderedDictionary.prototype.indexOfKey = function(key) {
      return this.list.indexOf(key);
    };

    OrderedDictionary.prototype.keyAtIndex = function(index) {
      return this.list[index];
    };

    OrderedDictionary.prototype.valueFromKey = function(key) {
      return this.dict[key];
    };

    OrderedDictionary.prototype.valueAtIndex = function(index) {
      return this.dict[this.list[index]];
    };

    OrderedDictionary.prototype.getValues = function() {
      var key;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(this.dict[key]);
        }
        return _results;
      }).call(this);
    };

    OrderedDictionary.prototype.length = function() {
      return this.list.length;
    };

    OrderedDictionary.prototype.insertAtIndex = function(index, key, value) {
      this.list.splice(index, 0, key);
      return this.dict[key] = value;
    };

    return OrderedDictionary;

  })();
  window.OrderedDictionary = OrderedDictionary;
  return OrderedDictionary;
});

//# sourceMappingURL=ordered_dictionary.map
;
// Generated by CoffeeScript 1.7.1
define('modules/clean/hi_res',['jquery'], function($j) {
  var HiRes;
  HiRes = (function() {
    function HiRes($el) {
      var no_resize;
      if (!this.constructor._show_hi_res()) {
        return;
      }
      no_resize = $el.attr('data-hi-res-no-resize');
      this.constructor.set_src($el, $el.attr('data-hi-res'), no_resize);
      this.constructor.set_bg($el, $el.attr('data-hi-res-background'), no_resize);
    }

    HiRes.set_src = function($img, hi_res_src, hi_res_no_resize) {
      if (!this._show_hi_res()) {
        return;
      }
      if (hi_res_src && hi_res_src !== $img.attr('src')) {
        return this._replace($img, hi_res_src, !hi_res_no_resize, this._replace_img);
      }
    };

    HiRes.set_bg = function($el, hi_res_src, hi_res_no_resize) {
      if (!this._show_hi_res()) {
        return;
      }
      return this._replace($el, hi_res_src, !hi_res_no_resize, this._replace_background);
    };

    HiRes._show_hi_res = function() {
      return 'devicePixelRatio' in window && window.devicePixelRatio > 1;
    };

    HiRes._replace = function($el, hi_res_src, resize, replace_fn) {
      var img;
      if (!hi_res_src) {
        return;
      }
      img = new Image();
      img.src = hi_res_src;
      return $j(img).on('load', function() {
        return replace_fn($el, hi_res_src, resize, img.width, img.height);
      });
    };

    HiRes._replace_img = function($el, hi_res_src, resize, w, h) {
      $el.attr('src', hi_res_src);
      if (resize) {
        $el.width(w / 2);
        return $el.height(h / 2);
      }
    };

    HiRes._replace_background = function($el, hi_res, resize, w, h) {
      var background_image_style;
      background_image_style = "url('%(src)s')".format({
        src: hi_res
      });
      $el.css('backgroundImage', background_image_style);
      if (resize) {
        return $el.css('backgroundSize', "" + (w / 2) + "px " + (h / 2) + "px");
      }
    };

    return HiRes;

  })();
  return HiRes;
});

//# sourceMappingURL=hi_res.map
;
// Generated by CoffeeScript 1.7.1
define('modules/clean/job_progress',['jquery'], function($j) {
  var Job, ModalProgress, ProgressBar;
  ProgressBar = {
    make: function(id, width) {
      var $inner, $opct, $outer, $over, $under, $upct, wstr;
      if (width == null) {
        width = 300;
      }
      wstr = width.toString() + "px";
      $outer = $j('<div />', {
        "class": 'outer-progress-bar'
      }).css({
        width: wstr
      });
      $inner = $j('<div />', {
        "class": 'inner-progress-bar',
        id: "pb_" + id
      }).css({
        width: wstr
      });
      $under = $j('<div />', {
        "class": 'under-pb progress-bar'
      }).css({
        width: wstr
      });
      $over = $j('<div />', {
        "class": 'over-pb progress-bar',
        id: "pb_" + id + "_over"
      }).css({
        display: 'none'
      });
      $upct = $j('<div />', {
        "class": 'pb-percentage',
        id: "pb_" + id + "_upct"
      }).css({
        width: wstr
      });
      $opct = $j('<div />', {
        "class": 'pb-percentage',
        id: "pb_" + id + "_opct"
      }).css({
        width: wstr
      });
      $under.append($upct);
      $over.append($opct);
      $inner.append($under);
      $inner.append($over);
      $outer.append($inner);
      $over.data('progress-width', width);
      return $outer;
    },
    set: function(id, frac) {
      var $over, progress_width, width;
      $over = $j("#pb_" + id + "_over");
      if (!$over) {
        return;
      }
      frac = Math.min(frac, 1);
      progress_width = $over.data('progress-width');
      width = String(progress_width * frac) + "px";
      $over.show();
      return $over.css({
        backgroundColor: "#348DD3",
        overflow: 'hidden',
        width: width
      });
    }
  };
  Job = {
    complete: {},
    handled: function(job_id) {
      var already_handled;
      if (!job_id) {
        return false;
      }
      already_handled = !!Job.complete[job_id];
      Job.complete[job_id] = true;
      return already_handled;
    },
    peek: function(job_id) {
      if (!job_id) {
        return false;
      }
      return !!Job.complete[job_id];
    }
  };
  ModalProgress = {
    show: function(text) {
      var $body, $loading_div, $modal_progress_bar, $modal_progress_container, $modal_progress_content, $modal_progress_text, _ref;
      if (!text) {
        return;
      }

      /*global: DBModalStack may or may not exist, doesn't matter */
      if (typeof DBModalStack !== "undefined" && DBModalStack !== null) {
        if ((_ref = DBModalStack.top()) != null) {
          _ref.hide();
        }
      }
      $body = $j('body');
      $loading_div = $j('<div />', {
        id: 'modal-progress-overlay'
      });
      $loading_div.hide();
      $loading_div.appendTo($body);
      if ($j('#browse-box').length) {
        $loading_div.clonePosition($j('#browse-box'));
      } else if ($j('#gallery-view-media').length) {
        $loading_div.clonePosition($j('#gallery-view-media'));
      } else {
        $loading_div.css({
          position: 'fixed',
          width: '100%',
          height: '100%'
        });
      }
      if (!$loading_div.width()) {
        return;
      }
      $modal_progress_content = $j("<div />", {
        id: "modal-progress-content"
      });
      $modal_progress_container = $j("<div />", {
        id: "modal-progress-container"
      });
      $modal_progress_bar = $j("<div />", {
        id: "modal-progress-bar",
        opacity: 1,
        html: ProgressBar.make("modal-progress", 150, "")
      });
      $modal_progress_text = $j("<div />", {
        id: "modal-progress-text",
        text: text
      });
      $modal_progress_content.hide();
      $modal_progress_container.append($modal_progress_bar, $modal_progress_text);
      $modal_progress_content.append($modal_progress_container);
      $body.append($modal_progress_content);
      $loading_div.fadeTo(250, 0.7);
      return $modal_progress_content.fadeIn(250);
    },
    update: function(progress) {
      var parts;
      if (progress.indexOf("/") > 0) {
        parts = progress.split("/");
        progress = Number(parts[0]) / Number(parts[1]);
        if (isNaN(progress)) {
          return;
        }
      }
      return ProgressBar.set("modal-progress", progress);
    },
    hide: function() {
      $j("#modal-progress-overlay").fadeOut(250, function() {
        return $j("#modal-progress-overlay").remove();
      });
      return $j("#modal-progress-content").fadeOut(250, function() {
        return $j("#modal-progress-content").remove();
      });
    }
  };
  window.ModalProgress = ModalProgress;
  window.Job = Job;
  return {
    ModalProgress: ModalProgress,
    Job: Job
  };
});

//# sourceMappingURL=job_progress.map
;
// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('modules/clean/storage',[], function() {
  var BrowserStorage, LocalStorage, SessionStorage;
  BrowserStorage = (function() {
    function BrowserStorage() {}

    BrowserStorage.storage = void 0;

    BrowserStorage.get = function(key) {
      if (this.storage && window.JSON) {
        return JSON.parse(this.storage.getItem(key));
      }
    };

    BrowserStorage.set = function(key, value) {
      if (!this.storage || !window.JSON) {
        return;
      }
      return this.storage.setItem(key, JSON.stringify(value));
    };

    return BrowserStorage;

  })();
  SessionStorage = (function(_super) {
    __extends(SessionStorage, _super);

    function SessionStorage() {
      return SessionStorage.__super__.constructor.apply(this, arguments);
    }

    SessionStorage.storage = (function() {
      try {
        return window.sessionStorage;
      } catch (_error) {}
    })();

    return SessionStorage;

  })(BrowserStorage);
  LocalStorage = (function(_super) {
    __extends(LocalStorage, _super);

    function LocalStorage() {
      return LocalStorage.__super__.constructor.apply(this, arguments);
    }

    LocalStorage.storage = (function() {
      try {
        return window.localStorage;
      } catch (_error) {}
    })();

    return LocalStorage;

  })(BrowserStorage);
  return {
    SessionStorage: SessionStorage,
    LocalStorage: LocalStorage
  };
});

//# sourceMappingURL=storage.map
;
// Generated by CoffeeScript 1.7.1
define('modules/clean/undo',['jquery', 'modules/core/html', 'modules/core/i18n', 'modules/core/notify'], function($j, HTML, _arg, Notify) {
  var UndoAction, _;
  _ = _arg._;
  UndoAction = (function() {
    function UndoAction() {}

    UndoAction.perform_undo = function() {
      if (this.undo_handler != null) {
        this.undo_handler(this.undo_info);
        return this.undo_handler = this.undo_info = null;
      }
    };

    UndoAction.notifyWithUndo = function(msg, undo_info, undo_handler) {
      var container, undo_link;
      if (!undo_info) {
        return Notify.success(msg);
      }
      this.undo_info = undo_info;
      this.undo_handler = undo_handler;
      container = $j('<span />');
      if (msg.toHTML != null) {
        container.html(msg.toHTML());
      } else {
        container.text(msg);
      }
      undo_link = $j("<a/>", {
        href: "#"
      }).text(_("Undo"));
      undo_link.on("click", function() {
        UndoAction.perform_undo();
        return false;
      });
      container.append("&nbsp;").append(undo_link);
      return this.undo_notification = Notify.success(container, 30);
    };

    return UndoAction;

  })();
  window.UndoAction = UndoAction;
  return UndoAction;
});

//# sourceMappingURL=undo.map
;
// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('modules/clean/ajax',['jquery', 'external/underscore', 'modules/core/cookies', 'modules/core/exception', 'modules/core/html', 'modules/core/i18n', 'modules/core/notify', 'modules/core/uri', 'modules/clean/job_progress', 'modules/clean/storage', 'modules/clean/undo'], function($j, $u, Cookies, JSException, HTML, _arg, Notify, URI, job_progress, storage, UndoAction) {
  var AUTH_BEHAVIORS, AsyncProgressWatcherBehavior, AuthenticatedRequest, BackgroundRequest, BaseAjaxBehavior, CSRFErrorReloadBehavior, CSRFTokenInjectionBehavior, ChainedAjaxBehavior, DEBUG_BEHAVIORS, DebugErrorBehavior, DebugPanelCProfileBehavior, DebugPanelGandalfBehavior, FORM_WEB_BEHAVIORS, FormWebRequest, JOB_BEHAVIORS, LogRequestErrorBehavior, NOTIFY_BEHAVIORS, ProgressWatcherBehavior, RESPONSE_PREFIX_ASYNC_DONE, RESPONSE_PREFIX_ASYNC_ERROR, RESPONSE_PREFIX_ASYNC_JOB, RESPONSE_PREFIX_NOTIFY_ERROR, Request, RequestTracingInjectionBehavior, RestrictAjaxBehavior, SubjectUserInjectionBehavior, UserNotifyErrorBehavior, UserNotifyStillWorkingBehavior, ValidationSchemaRequest, WEB_BEHAVIORS, WEB_PROGRESS_BEHAVIORS, WebProgressRequest, WebRequest, chain_behavior, exports, _;
  _ = _arg._;
  RESPONSE_PREFIX_NOTIFY_ERROR = 'err:';
  RESPONSE_PREFIX_ASYNC_JOB = 'async_task_started:';
  RESPONSE_PREFIX_ASYNC_ERROR = 'async_task_err:';
  RESPONSE_PREFIX_ASYNC_DONE = 'done:';
  Request = function(options, ajax_behaviors) {
    var base, behavior, type, xhr;
    if (options == null) {
      options = {};
    }
    if (ajax_behaviors == null) {
      ajax_behaviors = [];
    }
    if (options.type == null) {
      if (options.method != null) {
        if (!(typeof Constants !== "undefined" && Constants !== null ? Constants.IS_PROD : void 0)) {
          console.log('Expected "type" attribute; received "method"');
        }
        type = options.method;
      } else {
        type = 'POST';
      }
      options.type = type;
    }
    base = new BaseAjaxBehavior(options);
    behavior = chain_behavior(base, ajax_behaviors);
    xhr = $j.ajax({
      url: behavior.url(),
      type: options.type,
      noDropboxDefaults: true,
      data: behavior.data(),
      dataType: options.dataType || 'text',
      traditional: behavior.traditional(),
      xhrFields: behavior.xhrFields(),
      success: function(data, status, xhr) {
        return behavior.success(data, status, xhr);
      },
      error: function(xhr, status, error_string) {
        return behavior.error(xhr, status, error_string);
      },
      complete: function(xhr, status) {
        return behavior.complete(xhr, status);
      }
    });
    return behavior.request(xhr);
  };
  chain_behavior = function(base, to_chain) {
    var behavior, chain, last, _i, _j, _len, _len1, _ref;
    chain = [base];
    _ref = $u(to_chain.slice(0)).reverse();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      behavior = _ref[_i];
      chain.push(new behavior());
    }
    last = null;
    for (_j = 0, _len1 = chain.length; _j < _len1; _j++) {
      behavior = chain[_j];
      if (last) {
        behavior.next = last;
      }
      last = behavior;
    }
    return last;
  };
  BaseAjaxBehavior = (function() {
    function BaseAjaxBehavior(options) {
      if (options == null) {
        options = {};
      }
      this.options = function() {
        return options;
      };
      this.url = function() {
        return String(options.url || "");
      };
      this.data = function() {
        return options.data || {};
      };
      this.traditional = function() {
        return options.traditional || false;
      };
      this.xhrFields = function() {
        return options.xhrFields || {};
      };
      this.success = options.success || this.identity;
      this.error = options.error || this.identity;
      this.complete = options.complete || this.identity;
      this.request = this.identity;
    }

    BaseAjaxBehavior.prototype.identity = function(x) {
      return x;
    };

    return BaseAjaxBehavior;

  })();
  ChainedAjaxBehavior = (function() {
    function ChainedAjaxBehavior() {}

    ChainedAjaxBehavior.prototype.options = function() {
      return this.next.options();
    };

    ChainedAjaxBehavior.prototype.url = function() {
      return this.next.url();
    };

    ChainedAjaxBehavior.prototype.data = function() {
      return this.next.data();
    };

    ChainedAjaxBehavior.prototype.traditional = function() {
      return this.next.traditional();
    };

    ChainedAjaxBehavior.prototype.xhrFields = function() {
      return this.next.xhrFields();
    };

    ChainedAjaxBehavior.prototype.success = function(data, status, xhr) {
      return this.next.success(data, status, xhr);
    };

    ChainedAjaxBehavior.prototype.error = function(xhr, status, error_string) {
      return this.next.error(xhr, status, error_string);
    };

    ChainedAjaxBehavior.prototype.complete = function(xhr, status) {
      return this.next.complete(xhr, status);
    };

    ChainedAjaxBehavior.prototype.request = function(xhr) {
      return this.next.request(xhr);
    };

    return ChainedAjaxBehavior;

  })();
  CSRFTokenInjectionBehavior = (function(_super) {
    __extends(CSRFTokenInjectionBehavior, _super);

    function CSRFTokenInjectionBehavior() {
      return CSRFTokenInjectionBehavior.__super__.constructor.apply(this, arguments);
    }

    CSRFTokenInjectionBehavior.prototype.SUPPORTED_TLDS = ['dropbox.com', 'carousel.com'];

    CSRFTokenInjectionBehavior.prototype.data = function() {
      var injected;
      JSException.assert(this._is_db_domain(), 'injecting CSRF token into request to non-dropbox domain');
      injected = {
        is_xhr: true,
        t: Cookies.read(Constants.JS_CSRF_COOKIE) || ''
      };
      return $j.extend(injected, this.next.data());
    };

    CSRFTokenInjectionBehavior.prototype._is_db_domain = function() {
      var authority, authority_parts;
      authority = URI.parse(String(this.url())).authority;
      if (!authority) {
        return true;
      }
      authority_parts = authority.split('.');
      return $u.reduce(this.SUPPORTED_TLDS, function(memo, tld) {
        var authority_domain, tld_parts;
        tld_parts = tld.split('.');
        authority_domain = authority_parts.slice(-1 * tld_parts.length).join('.');
        return memo || tld === authority_domain;
      }, false);
    };

    return CSRFTokenInjectionBehavior;

  })(ChainedAjaxBehavior);
  SubjectUserInjectionBehavior = (function(_super) {
    __extends(SubjectUserInjectionBehavior, _super);

    function SubjectUserInjectionBehavior() {
      return SubjectUserInjectionBehavior.__super__.constructor.apply(this, arguments);
    }

    SubjectUserInjectionBehavior.prototype.data = function() {
      var data, options;
      data = this.next.data();
      options = this.options();
      if (options.subject_user && !data[Constants.UID_PARAM_NAME]) {
        data[Constants.UID_PARAM_NAME] = String(options.subject_user);
      }
      return data;
    };

    return SubjectUserInjectionBehavior;

  })(ChainedAjaxBehavior);
  CSRFErrorReloadBehavior = (function(_super) {
    __extends(CSRFErrorReloadBehavior, _super);

    function CSRFErrorReloadBehavior() {
      return CSRFErrorReloadBehavior.__super__.constructor.apply(this, arguments);
    }

    CSRFErrorReloadBehavior.prototype.error = function(xhr, status, error_string) {
      var last_timestamp, now_timestamp;
      if (xhr.status === 403) {
        last_timestamp = storage.SessionStorage.get('reload-timestamp');
        now_timestamp = new Date().getTime();
        if (!last_timestamp || now_timestamp - last_timestamp > 30 * 1000) {
          storage.SessionStorage.set('reload-timestamp', now_timestamp);
          window.location.reload(true);
        }
      }
      return this.next.error(xhr, status, error_string);
    };

    return CSRFErrorReloadBehavior;

  })(ChainedAjaxBehavior);
  RestrictAjaxBehavior = (function(_super) {
    __extends(RestrictAjaxBehavior, _super);

    function RestrictAjaxBehavior() {
      return RestrictAjaxBehavior.__super__.constructor.apply(this, arguments);
    }

    RestrictAjaxBehavior.prototype.data = function() {
      var data;
      data = this.next.data();
      if ($j.ajaxSettings.restrict != null) {
        data.restrict = $j.ajaxSettings.restrict;
      }
      return data;
    };

    return RestrictAjaxBehavior;

  })(ChainedAjaxBehavior);
  RequestTracingInjectionBehavior = (function(_super) {
    __extends(RequestTracingInjectionBehavior, _super);

    function RequestTracingInjectionBehavior() {
      return RequestTracingInjectionBehavior.__super__.constructor.apply(this, arguments);
    }

    RequestTracingInjectionBehavior.prototype.data = function() {
      var data, injected;
      data = this.next.data();
      if (!(Constants.REQUEST_TRACING_ENABLED && this.options().type.toLowerCase() === "post")) {
        return data;
      }
      injected = {
        parent_request_id: Constants.REQUEST_ID
      };
      return $j.extend(injected, data);
    };

    return RequestTracingInjectionBehavior;

  })(ChainedAjaxBehavior);
  DebugPanelCProfileBehavior = (function(_super) {
    __extends(DebugPanelCProfileBehavior, _super);

    function DebugPanelCProfileBehavior() {
      return DebugPanelCProfileBehavior.__super__.constructor.apply(this, arguments);
    }

    DebugPanelCProfileBehavior.prototype.data = function() {
      var data, injected;
      data = this.next.data();
      if (!Constants.CPROFILE_ENABLED) {
        return data;
      }
      injected = {
        parent_request_id: Constants.REQUEST_ID,
        cProfile: Constants.CPROFILE_PARAMETER
      };
      return $j.extend(injected, data);
    };

    DebugPanelCProfileBehavior.prototype.success = function(data, status, xhr) {
      this._report_cprofile(data, status, xhr);
      return this.next.success(data, status, xhr);
    };

    DebugPanelCProfileBehavior.prototype._report_cprofile = function(data, status, xhr) {
      var cprofile, cprofile_link, existing_links;
      cprofile = $j('#cprofile');
      if (!cprofile.length) {
        return;
      }
      cprofile_link = this._build_cprofile_link(xhr);
      existing_links = cprofile.find('.ajax');
      if (existing_links.length >= 10) {
        existing_links.last().remove();
      }
      return cprofile.prepend(cprofile_link);
    };

    DebugPanelCProfileBehavior.prototype._build_cprofile_link = function(xhr) {
      var host, original_request_id, profile_link, query, server_response_time, url, _i, _len, _ref;
      original_request_id = xhr.getResponseHeader('X-Dropbox-Request-Id');
      server_response_time = xhr.getResponseHeader("X-Server-Response-Time") || "-1";
      query = {
        request_id: "" + Constants.REQUEST_ID + "-" + original_request_id
      };
      url = this.url();
      if (url.indexOf(Constants.BLOCK_CLUSTER) !== -1) {
        query['block'] = 1;
      } else {
        _ref = Constants.BATCH_THUMB_ENDPOINTS;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          host = _ref[_i];
          if (url.indexOf(host) !== -1) {
            query['block'] = 1;
            break;
          }
        }
      }
      url = url.replace(/[^/]*\/\/[^/]+/, '').replace(/\?.*$/, '');
      profile_link = $j('<a class="ajax" target="_new" />').attr('href', String(URI({
        path: '/profile/cprofile',
        query: query
      }))).text("Ajax: " + url + " (" + server_response_time + "ms)");
      return profile_link;
    };

    return DebugPanelCProfileBehavior;

  })(ChainedAjaxBehavior);
  DebugPanelGandalfBehavior = (function(_super) {
    __extends(DebugPanelGandalfBehavior, _super);

    function DebugPanelGandalfBehavior() {
      return DebugPanelGandalfBehavior.__super__.constructor.apply(this, arguments);
    }

    DebugPanelGandalfBehavior.prototype.data = function() {
      var data;
      data = this.next.data();
      if (!Constants.GANDALF_PANEL) {
        return data;
      }
      return $j.extend({
        gandalf_panel: 1
      }, data);
    };

    DebugPanelGandalfBehavior.prototype.success = function(data, status, xhr) {
      this._report_gandalf(data, status, xhr);
      return this.next.success(data, status, xhr);
    };

    DebugPanelGandalfBehavior.prototype._report_gandalf = function(data, status, xhr) {
      var _ref;
      if ($j('#gandalf_panel').length && this.url().substring(0, 14) !== '/gandalf_panel') {

        /* global: gandalf_panel is conditionally set in ui/page/debug_panel */
        return (_ref = window.gandalf_panel) != null ? _ref.add(this.url(), xhr.getResponseHeader('X-Dropbox-Request-Id')) : void 0;
      }
    };

    return DebugPanelGandalfBehavior;

  })(ChainedAjaxBehavior);
  LogRequestErrorBehavior = (function(_super) {
    __extends(LogRequestErrorBehavior, _super);

    function LogRequestErrorBehavior() {
      return LogRequestErrorBehavior.__super__.constructor.apply(this, arguments);
    }

    LogRequestErrorBehavior.prototype.error = function(xhr, status, error_string) {
      this._log_error(xhr, status, error_string);
      return this.next.error(xhr, status, error_string);
    };

    LogRequestErrorBehavior.prototype._log_error = function(xhr, status, error_string) {
      var logging_data, logging_uri;
      if (status !== 0 && status < 400) {
        return;
      }
      logging_data = {
        url: this.url(),
        response_code: xhr.status,
        source_type: "web",
        request_id: xhr.getResponseHeader('X-Dropbox-Request-Id')
      };
      logging_uri = URI({
        path: '/web_response_code_log'
      });
      return AuthenticatedRequest({
        url: logging_uri,
        data: logging_data
      });
    };

    return LogRequestErrorBehavior;

  })(ChainedAjaxBehavior);
  DebugErrorBehavior = (function(_super) {
    __extends(DebugErrorBehavior, _super);

    function DebugErrorBehavior() {
      return DebugErrorBehavior.__super__.constructor.apply(this, arguments);
    }

    DebugErrorBehavior.prototype.error = function(xhr, status, error_string) {
      this._notify_dev(xhr, status, error_string);
      return this.next.error(xhr, status, error_string);
    };

    DebugErrorBehavior.prototype._notify_dev = function(xhr, status, error_string) {
      var container, debug_link, url;
      if (!(typeof Constants !== "undefined" && Constants !== null ? Constants.IS_PROD : void 0) && xhr.status === 500 && xhr.getResponseHeader('X-Debug-Url')) {
        url = xhr.getResponseHeader('X-Debug-Url');
        container = $j('<span />');
        container.text(Notify.DEFAULT_ERROR);
        debug_link = $j("<a/>", {
          href: url,
          target: '_blank'
        }).text(_('View debug'));
        container.append("&nbsp;").append(debug_link);
        return Notify.error(new HTML(container.html()));
      }
    };

    return DebugErrorBehavior;

  })(ChainedAjaxBehavior);
  UserNotifyErrorBehavior = (function(_super) {
    __extends(UserNotifyErrorBehavior, _super);

    function UserNotifyErrorBehavior() {
      return UserNotifyErrorBehavior.__super__.constructor.apply(this, arguments);
    }

    UserNotifyErrorBehavior.prototype.success = function(data, status, xhr) {
      var error_msg;
      if (!xhr.responseText.length) {
        return this.next.error(xhr, status, 'empty response');
      } else if (xhr.responseText.indexOf(RESPONSE_PREFIX_NOTIFY_ERROR) === 0) {
        error_msg = xhr.responseText.substr(RESPONSE_PREFIX_NOTIFY_ERROR.length);
        Notify.error(error_msg);
        return this.next.error(xhr, status, 'server error response');
      }
      return this.next.success(data, status, xhr);
    };

    return UserNotifyErrorBehavior;

  })(ChainedAjaxBehavior);
  UserNotifyStillWorkingBehavior = (function(_super) {
    __extends(UserNotifyStillWorkingBehavior, _super);

    function UserNotifyStillWorkingBehavior() {
      this._clear_working_msg = __bind(this._clear_working_msg, this);
      return UserNotifyStillWorkingBehavior.__super__.constructor.apply(this, arguments);
    }

    UserNotifyStillWorkingBehavior.prototype.request = function(xhr) {
      this.xhr = xhr;
      setTimeout((function(_this) {
        return function() {
          if (_this._request_finished()) {
            return;
          }
          if (_this._should_show_working_msg()) {
            _this._show_working_msg();
            return _this.xhr.done(_this._clear_working_msg);
          }
        };
      })(this), 4000);
      return this.next.request(this.xhr);
    };

    UserNotifyStillWorkingBehavior.prototype._request_finished = function() {
      return this.xhr.readyState === 4;
    };

    UserNotifyStillWorkingBehavior.prototype._should_show_working_msg = function() {
      return Notify.isShown() && Notify.current() !== UndoAction.undo_notification;
    };

    UserNotifyStillWorkingBehavior.prototype._show_working_msg = function() {
      return this.notification = Notify.success(_('Still working...'));
    };

    UserNotifyStillWorkingBehavior.prototype._clear_working_msg = function() {
      if (Notify.isShown() && this.notification === Notify.current()) {
        return Notify.clear();
      }
    };

    return UserNotifyStillWorkingBehavior;

  })(ChainedAjaxBehavior);
  ProgressWatcherBehavior = (function(_super) {
    __extends(ProgressWatcherBehavior, _super);

    function ProgressWatcherBehavior() {
      this._watch = __bind(this._watch, this);
      return ProgressWatcherBehavior.__super__.constructor.apply(this, arguments);
    }

    ProgressWatcherBehavior.prototype.data = function() {
      var data, subject_user;
      this.job_id = ProgressWatcherBehavior.generate_job_id();
      data = this.next.data();
      subject_user = this.options().subject_user;
      if (subject_user) {
        this.uid = data[Constants.UID_PARAM_NAME] || String(subject_user);
      }
      return $j.extend({
        job_id: this.job_id
      }, data);
    };

    ProgressWatcherBehavior.prototype.request = function(xhr) {
      this._interval = 1000;
      this._failures = 0;
      this._watch_count = 0;
      this._watch_id = setInterval(this._watch, this._interval);
      return this.next.request(xhr);
    };

    ProgressWatcherBehavior.prototype.success = function(data, status, xhr) {
      return this.next.success(data, status, xhr);
    };

    ProgressWatcherBehavior.prototype.error = function(xhr, status, error_string) {
      return this.next.error(xhr, status, error_string);
    };

    ProgressWatcherBehavior.prototype.complete = function(xhr, status) {
      this._stop();
      job_progress.Job.handled(this.job_id);
      return this.next.complete(xhr, status);
    };

    ProgressWatcherBehavior.prototype._watch = function() {
      if (job_progress.Job.peek(this.job_id)) {
        return this._stop();
      }
      this._watch_count++;
      if (this._watch_count % 10 === 0) {
        clearInterval(this._watch_id);
        this._interval = Math.min(Math.floor(this._interval * 1.5), 30000);
        this._watch_id = setInterval(this._watch, this._interval);
      }
      this._show_progress_modal();
      return this._fetch_progress();
    };

    ProgressWatcherBehavior.prototype._stop = function() {
      clearInterval(this._watch_id);
      return job_progress.ModalProgress.hide();
    };

    ProgressWatcherBehavior.prototype._show_progress_modal = function() {
      if (this._modal_shown) {
        return;
      }
      this._modal_shown = true;
      return job_progress.ModalProgress.show(this.options().progress_text);
    };

    ProgressWatcherBehavior.prototype._fetch_progress = function() {
      var status_params;
      status_params = {};
      if (this.uid) {
        status_params[Constants.UID_PARAM_NAME] = this.uid;
      }
      return BackgroundRequest({
        url: "/job_status/" + this.job_id,
        data: status_params,
        success: (function(_this) {
          return function(data, status, xhr) {
            var progress;
            if (xhr.responseText.indexOf('done') === 0) {
              progress = "1/1";
            } else {
              progress = xhr.responseText;
            }
            return job_progress.ModalProgress.update(progress);
          };
        })(this),
        error: (function(_this) {
          return function(xhr, status, error_string) {
            _this._failures++;
            if (_this._failures < 3) {
              return;
            }
            _this._stop();
            return _this.next.error(xhr, status, error_string);
          };
        })(this)
      });
    };

    ProgressWatcherBehavior.generate_job_id = function() {
      var d, rand_part, time_part;
      d = new Date();
      time_part = d.getTime().toString();
      rand_part = Math.floor(Math.random() * 1000000).toString().lpad(6);
      return time_part + rand_part;
    };

    return ProgressWatcherBehavior;

  })(ChainedAjaxBehavior);
  AsyncProgressWatcherBehavior = (function(_super) {
    __extends(AsyncProgressWatcherBehavior, _super);

    function AsyncProgressWatcherBehavior() {
      this._watch = __bind(this._watch, this);
      return AsyncProgressWatcherBehavior.__super__.constructor.apply(this, arguments);
    }

    AsyncProgressWatcherBehavior.prototype.data = function() {
      var data, subject_user;
      data = this.next.data();
      subject_user = this.options().subject_user;
      if (subject_user) {
        this.uid = data[Constants.UID_PARAM_NAME] || String(subject_user);
      }
      return data;
    };

    AsyncProgressWatcherBehavior.prototype.success = function(data, status, xhr) {
      if (!this._is_async_job_response(xhr)) {
        return this.next.success(data, status, xhr);
      }
      this.job_id = xhr.responseText.split(':')[1];
      this._interval = 1000;
      this._failures = 0;
      this._watch_count = 0;
      return this._watch_id = setInterval(this._watch, this._interval);
    };

    AsyncProgressWatcherBehavior.prototype.complete = function(xhr, status) {
      if (!this._is_async_job_response(xhr)) {
        return this.next.complete(xhr, status);
      }
    };

    AsyncProgressWatcherBehavior.prototype._is_async_job_response = function(xhr) {
      var job_id, _ref;
      if (((_ref = xhr.responseText) != null ? _ref.indexOf(RESPONSE_PREFIX_ASYNC_JOB) : void 0) !== 0) {
        return false;
      }
      job_id = xhr.responseText.split(':')[1];
      return job_id.match(/^[A-Za-z0-9_\-=]*$/);
    };

    AsyncProgressWatcherBehavior.prototype._watch = function() {
      if (job_progress.Job.peek(this.job_id)) {
        return this._stop();
      }
      this._watch_count++;
      if (this._watch_count % 10 === 0) {
        clearInterval(this._watch_id);
        this._interval = Math.min(Math.floor(this._interval * 1.5), 30000);
        this._watch_id = setInterval(this._watch, this._interval);
      }
      this._show_progress_modal();
      return this._fetch_progress();
    };

    AsyncProgressWatcherBehavior.prototype._stop = function() {
      clearInterval(this._watch_id);
      return job_progress.ModalProgress.hide();
    };

    AsyncProgressWatcherBehavior.prototype._show_progress_modal = function() {
      if (this._modal_shown) {
        return;
      }
      this._modal_shown = true;
      return job_progress.ModalProgress.show(this.options().progress_text);
    };

    AsyncProgressWatcherBehavior.prototype._fetch_progress = function() {
      var status_params;
      status_params = {};
      if (this.uid) {
        status_params[Constants.UID_PARAM_NAME] = this.uid;
      }
      return BackgroundRequest({
        url: "/async_task_status/" + this.job_id,
        data: status_params,
        success: (function(_this) {
          return function(data, status, xhr) {
            var error_msg, msg, text;
            text = xhr.responseText;
            if (text.indexOf(RESPONSE_PREFIX_ASYNC_DONE) === 0) {
              job_progress.Job.handled(_this.job_id);
              _this._stop();
              text = text.substr(RESPONSE_PREFIX_ASYNC_DONE.length);
              xhr.responseText = text;
              _this.next.success(text, status, xhr);
              return _this.next.complete(xhr, status);
            } else if (text.indexOf(RESPONSE_PREFIX_NOTIFY_ERROR) === 0) {
              job_progress.Job.handled(_this.job_id);
              _this._stop();
              error_msg = text.substr(RESPONSE_PREFIX_NOTIFY_ERROR.length);
              Notify.error(error_msg);
              _this.next.error(xhr, status, 'server error response');
              return _this.next.complete(xhr, status);
            } else if (text.indexOf(RESPONSE_PREFIX_ASYNC_ERROR) === 0) {
              job_progress.Job.handled(_this.job_id);
              _this._stop();
              msg = text.substr(RESPONSE_PREFIX_ASYNC_ERROR.length);
              Notify.error(new HTML(msg));
              return _this.next.complete(xhr, status);
            } else {
              return job_progress.ModalProgress.update(text);
            }
          };
        })(this),
        error: (function(_this) {
          return function(xhr, status, error_string) {
            _this._failures++;
            if (_this._failures < 3) {
              return;
            }
            _this._stop();
            _this.next.error(xhr, status, error_string);
            return _this.next.complete(xhr, status);
          };
        })(this)
      });
    };

    return AsyncProgressWatcherBehavior;

  })(ChainedAjaxBehavior);
  AUTH_BEHAVIORS = [SubjectUserInjectionBehavior, CSRFTokenInjectionBehavior, CSRFErrorReloadBehavior, RestrictAjaxBehavior];
  AuthenticatedRequest = function(options) {
    if (options == null) {
      options = {};
    }
    return Request(options, AUTH_BEHAVIORS);
  };
  NOTIFY_BEHAVIORS = [UserNotifyStillWorkingBehavior];
  DEBUG_BEHAVIORS = [LogRequestErrorBehavior, DebugErrorBehavior, DebugPanelGandalfBehavior, DebugPanelCProfileBehavior, RequestTracingInjectionBehavior];
  JOB_BEHAVIORS = [AsyncProgressWatcherBehavior];
  WEB_BEHAVIORS = [].concat(NOTIFY_BEHAVIORS, [UserNotifyErrorBehavior], DEBUG_BEHAVIORS, AUTH_BEHAVIORS, JOB_BEHAVIORS);
  WebRequest = function(options) {
    if (options == null) {
      options = {};
    }
    return Request(options, WEB_BEHAVIORS);
  };
  FORM_WEB_BEHAVIORS = [].concat(NOTIFY_BEHAVIORS, DEBUG_BEHAVIORS, AUTH_BEHAVIORS, JOB_BEHAVIORS);
  FormWebRequest = function(options) {
    if (options == null) {
      options = {};
    }
    return Request(options, FORM_WEB_BEHAVIORS);
  };
  WEB_PROGRESS_BEHAVIORS = [].concat(NOTIFY_BEHAVIORS, [UserNotifyErrorBehavior], DEBUG_BEHAVIORS, AUTH_BEHAVIORS, [ProgressWatcherBehavior], JOB_BEHAVIORS);
  WebProgressRequest = function(options) {
    if (options == null) {
      options = {};
    }
    return Request(options, WEB_PROGRESS_BEHAVIORS);
  };
  BackgroundRequest = function(options) {
    if (options == null) {
      options = {};
    }
    return Request(options, [].concat(DEBUG_BEHAVIORS, AUTH_BEHAVIORS));
  };
  ValidationSchemaRequest = function(options) {
    var base, behavior, xhr;
    if (options == null) {
      options = {};
    }
    base = new BaseAjaxBehavior(options);
    behavior = chain_behavior(base, AUTH_BEHAVIORS);
    xhr = $j.ajax({
      url: behavior.url(),
      type: 'OPTIONS',
      noDropboxDefaults: true,
      data: behavior.data(),
      success: function(data, status, xhr) {
        return behavior.success(data, status, xhr);
      },
      error: function(xhr, status, error_string) {
        return behavior.error(xhr, status, error_string);
      },
      complete: function(xhr, status) {
        return behavior.complete(xhr, status);
      }
    });
    return behavior.request(xhr);
  };
  exports = {
    Request: Request,
    AuthenticatedRequest: AuthenticatedRequest,
    BackgroundRequest: BackgroundRequest,
    WebRequest: WebRequest,
    FormWebRequest: FormWebRequest,
    WebProgressRequest: WebProgressRequest,
    ValidationSchemaRequest: ValidationSchemaRequest
  };
  window.ajax = exports;
  return exports;
});

//# sourceMappingURL=ajax.map
;
define('packaged/core-definition',['modules/core/browser', 'modules/core/controller_registry', 'modules/core/cookies', 'modules/core/dom', 'modules/core/exception', 'modules/core/html', 'modules/core/i18n', 'modules/core/instantiate', 'modules/core/kwargs', 'modules/core/notify', 'modules/core/ordered_dictionary', 'modules/core/uri', 'modules/clean/hi_res', 'modules/clean/ajax', 'modules/clean/job_progress', 'modules/clean/undo'], function () { return true; });

//# sourceMappingURL=core.js.map